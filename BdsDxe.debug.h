/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'BdsDxe.debug'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;
struct _EFI_SIMPLE_TEXT_INPUT_PROTOCOL;
struct _EFI_DRIVER_HEALTH_PROTOCOL;
struct _LIST_ENTRY;
struct _EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL;
struct _EFI_BDS_ARCH_PROTOCOL;
struct _EFI_FORM_BROWSER2_PROTOCOL;
struct _EFI_HII_CONFIG_ROUTING_PROTOCOL;
struct _EFI_HII_DATABASE_PROTOCOL;
struct _EFI_GRAPHICS_OUTPUT_PROTOCOL;
struct _EFI_HII_IMAGE_PROTOCOL;
struct _EFI_HII_STRING_PROTOCOL;
struct _EFI_HII_FONT_PROTOCOL;
struct _EFI_GENERIC_MEMORY_TEST_PROTOCOL;
struct _EFI_COMPONENT_NAME_PROTOCOL;
struct _EDKII_VARIABLE_LOCK_PROTOCOL;
struct _EFI_FILE_PROTOCOL;
struct _EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;
struct _EFI_BLOCK_IO_PROTOCOL;
struct _EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL;
struct _EFI_LOAD_FILE_PROTOCOL;
struct _EFI_USB_IO_PROTOCOL;
struct _EFI_DISK_INFO_PROTOCOL;
struct _EFI_BOOT_LOGO_PROTOCOL;
struct _EFI_PCI_IO_PROTOCOL;
struct _EFI_DEFERRED_IMAGE_LOAD_PROTOCOL;
struct _EFI_UGA_DRAW_PROTOCOL;
struct _EDKII_BOOT_LOGO2_PROTOCOL;
struct _EDKII_PLATFORM_LOGO_PROTOCOL;
struct _EFI_LOAD_FILE2_PROTOCOL;
struct _EFI_FIRMWARE_VOLUME2_PROTOCOL;
struct _EFI_DRIVER_DIAGNOSTICS2_PROTOCOL;
struct _EFI_DRIVER_DIAGNOSTICS_PROTOCOL;
struct _EFI_DRIVER_CONFIGURATION2_PROTOCOL;
struct _EFI_DRIVER_CONFIGURATION_PROTOCOL;
struct _EFI_COMPONENT_NAME2_PROTOCOL;
struct _EFI_DRIVER_BINDING_PROTOCOL;

/* 1 */
enum EXTENDMEM_COVERAGE_LEVEL : __int32
{
  IGNORE = 0x0,
  QUICK = 0x1,
  SPARSE = 0x2,
  EXTENSIVE = 0x3,
  MAXLEVEL = 0x4,
};

/* 2 */
typedef unsigned __int64 UINT64;

/* 3 */
typedef UINT64 UINTN;

/* 4 */
typedef UINTN RETURN_STATUS;

/* 5 */
typedef RETURN_STATUS EFI_STATUS;

/* 6 */
typedef unsigned __int16 UINT16;

/* 7 */
typedef unsigned __int16 CHAR16;

/* 8 */
typedef unsigned int UINT32;

/* 9 */
typedef unsigned __int8 UINT8;

/* 10 */
struct GUID
{
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
};

/* 11 */
typedef GUID EFI_GUID;

/* 12 */
struct EFI_DEVICE_PATH_PROTOCOL
{
  UINT8 Type;
  UINT8 SubType;
  UINT8 Length[2];
};

/* 13 */
enum EFI_BOOT_MANAGER_LOAD_OPTION_TYPE : __int32
{
  LoadOptionTypeDriver = 0x0,
  LoadOptionTypeSysPrep = 0x1,
  LoadOptionTypeBoot = 0x2,
  LoadOptionTypePlatformRecovery = 0x3,
  LoadOptionTypeMax = 0x4,
};

/* 14 */
struct EFI_BOOT_MANAGER_LOAD_OPTION
{
  UINTN OptionNumber;
  EFI_BOOT_MANAGER_LOAD_OPTION_TYPE OptionType;
  UINT32 Attributes;
  CHAR16 *Description;
  EFI_DEVICE_PATH_PROTOCOL *FilePath;
  UINT8 *OptionalData;
  UINT32 OptionalDataSize;
  EFI_GUID VendorGuid;
  EFI_STATUS Status;
  CHAR16 *ExitData;
  UINTN ExitDataSize;
};

/* 15 */
typedef __int64 INT64;

/* 16 */
typedef INT64 INTN;

/* 17 */
typedef unsigned __int8 BOOLEAN;

/* 18 */
typedef EFI_DEVICE_PATH_PROTOCOL EFI_DEVICE_PATH;

/* 19 */
typedef EFI_STATUS (*DUMP_VARIABLE_POLICY)(UINT8 *, UINT32 *);

/* 20 */
struct VARIABLE_POLICY_ENTRY
{
  UINT32 Version;
  UINT16 Size;
  UINT16 OffsetToName;
  EFI_GUID Namespace;
  UINT32 MinSize;
  UINT32 MaxSize;
  UINT32 AttributesMustHave;
  UINT32 AttributesCantHave;
  UINT8 LockPolicyType;
  UINT8 Padding[3];
};

/* 21 */
typedef EFI_STATUS (*REGISTER_VARIABLE_POLICY)(const VARIABLE_POLICY_ENTRY *);

/* 22 */
typedef EFI_STATUS (*IS_VARIABLE_POLICY_ENABLED)(BOOLEAN *);

/* 23 */
typedef EFI_STATUS (*DISABLE_VARIABLE_POLICY)(void);

/* 24 */
typedef EFI_STATUS (*LOCK_VARIABLE_POLICY)(void);

/* 25 */
struct _EDKII_VARIABLE_POLICY_PROTOCOL
{
  UINT64 Revision;
  DISABLE_VARIABLE_POLICY DisableVariablePolicy;
  IS_VARIABLE_POLICY_ENABLED IsVariablePolicyEnabled;
  REGISTER_VARIABLE_POLICY RegisterVariablePolicy;
  DUMP_VARIABLE_POLICY DumpVariablePolicy;
  LOCK_VARIABLE_POLICY LockVariablePolicy;
};

/* 26 */
typedef _EDKII_VARIABLE_POLICY_PROTOCOL EDKII_VARIABLE_POLICY_PROTOCOL;

/* 27 */
typedef void (*EFI_SET_MEM)(void *, UINTN, UINT8);

/* 28 */
typedef void (*EFI_COPY_MEM)(void *, void *, UINTN);

/* 29 */
typedef EFI_STATUS (*EFI_CALCULATE_CRC32)(void *, UINTN, UINT32 *);

/* 30 */
typedef void *EFI_HANDLE;

/* 31 */
typedef EFI_STATUS (*EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES)(EFI_HANDLE, ...);

/* 32 */
typedef EFI_STATUS (*EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES)(EFI_HANDLE *, ...);

/* 33 */
typedef EFI_STATUS (*EFI_LOCATE_PROTOCOL)(EFI_GUID *, void *, void **);

/* 34 */
enum EFI_LOCATE_SEARCH_TYPE : __int32
{
  AllHandles = 0x0,
  ByRegisterNotify = 0x1,
  ByProtocol = 0x2,
};

/* 35 */
typedef EFI_STATUS (*EFI_LOCATE_HANDLE_BUFFER)(EFI_LOCATE_SEARCH_TYPE, EFI_GUID *, void *, UINTN *, EFI_HANDLE **);

/* 36 */
typedef EFI_STATUS (*EFI_PROTOCOLS_PER_HANDLE)(EFI_HANDLE, EFI_GUID ***, UINTN *);

/* 37 */
struct EFI_OPEN_PROTOCOL_INFORMATION_ENTRY
{
  EFI_HANDLE AgentHandle;
  EFI_HANDLE ControllerHandle;
  UINT32 Attributes;
  UINT32 OpenCount;
};

/* 38 */
typedef EFI_STATUS (*EFI_OPEN_PROTOCOL_INFORMATION)(EFI_HANDLE, EFI_GUID *, EFI_OPEN_PROTOCOL_INFORMATION_ENTRY **, UINTN *);

/* 39 */
typedef EFI_STATUS (*EFI_CLOSE_PROTOCOL)(EFI_HANDLE, EFI_GUID *, EFI_HANDLE, EFI_HANDLE);

/* 40 */
typedef EFI_STATUS (*EFI_OPEN_PROTOCOL)(EFI_HANDLE, EFI_GUID *, void **, EFI_HANDLE, EFI_HANDLE, UINT32);

/* 41 */
typedef EFI_STATUS (*EFI_DISCONNECT_CONTROLLER)(EFI_HANDLE, EFI_HANDLE, EFI_HANDLE);

/* 42 */
typedef EFI_STATUS (*EFI_CONNECT_CONTROLLER)(EFI_HANDLE, EFI_HANDLE *, EFI_DEVICE_PATH_PROTOCOL *, BOOLEAN);

/* 43 */
typedef EFI_STATUS (*EFI_SET_WATCHDOG_TIMER)(UINTN, UINT64, UINTN, CHAR16 *);

/* 44 */
typedef EFI_STATUS (*EFI_STALL)(UINTN);

/* 45 */
typedef EFI_STATUS (*EFI_GET_NEXT_MONOTONIC_COUNT)(UINT64 *);

/* 46 */
typedef EFI_STATUS (*EFI_EXIT_BOOT_SERVICES)(EFI_HANDLE, UINTN);

/* 47 */
typedef EFI_STATUS (*EFI_IMAGE_UNLOAD)(EFI_HANDLE);

/* 48 */
typedef EFI_STATUS (*EFI_EXIT)(EFI_HANDLE, EFI_STATUS, UINTN, CHAR16 *);

/* 49 */
typedef EFI_STATUS (*EFI_IMAGE_START)(EFI_HANDLE, UINTN *, CHAR16 **);

/* 50 */
typedef EFI_STATUS (*EFI_IMAGE_LOAD)(BOOLEAN, EFI_HANDLE, EFI_DEVICE_PATH_PROTOCOL *, void *, UINTN, EFI_HANDLE *);

/* 51 */
typedef EFI_STATUS (*EFI_INSTALL_CONFIGURATION_TABLE)(EFI_GUID *, void *);

/* 52 */
typedef EFI_STATUS (*EFI_LOCATE_DEVICE_PATH)(EFI_GUID *, EFI_DEVICE_PATH_PROTOCOL **, EFI_HANDLE *);

/* 53 */
typedef EFI_STATUS (*EFI_LOCATE_HANDLE)(EFI_LOCATE_SEARCH_TYPE, EFI_GUID *, void *, UINTN *, EFI_HANDLE *);

/* 54 */
typedef void *EFI_EVENT;

/* 55 */
typedef EFI_STATUS (*EFI_REGISTER_PROTOCOL_NOTIFY)(EFI_GUID *, EFI_EVENT, void **);

/* 56 */
typedef EFI_STATUS (*EFI_HANDLE_PROTOCOL)(EFI_HANDLE, EFI_GUID *, void **);

/* 57 */
typedef EFI_STATUS (*EFI_UNINSTALL_PROTOCOL_INTERFACE)(EFI_HANDLE, EFI_GUID *, void *);

/* 58 */
typedef EFI_STATUS (*EFI_REINSTALL_PROTOCOL_INTERFACE)(EFI_HANDLE, EFI_GUID *, void *, void *);

/* 59 */
enum EFI_INTERFACE_TYPE : __int32
{
  EFI_NATIVE_INTERFACE = 0x0,
};

/* 60 */
typedef EFI_STATUS (*EFI_INSTALL_PROTOCOL_INTERFACE)(EFI_HANDLE *, EFI_GUID *, EFI_INTERFACE_TYPE, void *);

/* 61 */
typedef EFI_STATUS (*EFI_CHECK_EVENT)(EFI_EVENT);

/* 62 */
typedef EFI_STATUS (*EFI_CLOSE_EVENT)(EFI_EVENT);

/* 63 */
typedef EFI_STATUS (*EFI_SIGNAL_EVENT)(EFI_EVENT);

/* 64 */
typedef EFI_STATUS (*EFI_WAIT_FOR_EVENT)(UINTN, EFI_EVENT *, UINTN *);

/* 65 */
enum EFI_TIMER_DELAY : __int32
{
  TimerCancel = 0x0,
  TimerPeriodic = 0x1,
  TimerRelative = 0x2,
};

/* 66 */
typedef EFI_STATUS (*EFI_SET_TIMER)(EFI_EVENT, EFI_TIMER_DELAY, UINT64);

/* 67 */
typedef void (*EFI_EVENT_NOTIFY)(EFI_EVENT, void *);

/* 68 */
typedef UINTN EFI_TPL;

/* 69 */
typedef EFI_STATUS (*EFI_CREATE_EVENT)(UINT32, EFI_TPL, EFI_EVENT_NOTIFY, void *, EFI_EVENT *);

/* 70 */
typedef EFI_STATUS (*EFI_FREE_POOL)(void *);

/* 71 */
enum EFI_MEMORY_TYPE : __int32
{
  EfiReservedMemoryType = 0x0,
  EfiLoaderCode = 0x1,
  EfiLoaderData = 0x2,
  EfiBootServicesCode = 0x3,
  EfiBootServicesData = 0x4,
  EfiRuntimeServicesCode = 0x5,
  EfiRuntimeServicesData = 0x6,
  EfiConventionalMemory = 0x7,
  EfiUnusableMemory = 0x8,
  EfiACPIReclaimMemory = 0x9,
  EfiACPIMemoryNVS = 0xA,
  EfiMemoryMappedIO = 0xB,
  EfiMemoryMappedIOPortSpace = 0xC,
  EfiPalCode = 0xD,
  EfiPersistentMemory = 0xE,
  EfiMaxMemoryType = 0xF,
};

/* 72 */
typedef EFI_STATUS (*EFI_ALLOCATE_POOL)(EFI_MEMORY_TYPE, UINTN, void **);

/* 73 */
typedef UINT64 EFI_VIRTUAL_ADDRESS;

/* 74 */
typedef UINT64 EFI_PHYSICAL_ADDRESS;

/* 75 */
struct EFI_MEMORY_DESCRIPTOR
{
  UINT32 Type;
  EFI_PHYSICAL_ADDRESS PhysicalStart;
  EFI_VIRTUAL_ADDRESS VirtualStart;
  UINT64 NumberOfPages;
  UINT64 Attribute;
};

/* 76 */
typedef EFI_STATUS (*EFI_GET_MEMORY_MAP)(UINTN *, EFI_MEMORY_DESCRIPTOR *, UINTN *, UINTN *, UINT32 *);

/* 77 */
typedef EFI_STATUS (*EFI_FREE_PAGES)(EFI_PHYSICAL_ADDRESS, UINTN);

/* 78 */
enum EFI_ALLOCATE_TYPE : __int32
{
  AllocateAnyPages = 0x0,
  AllocateMaxAddress = 0x1,
  AllocateAddress = 0x2,
  MaxAllocateType = 0x3,
};

/* 79 */
typedef EFI_STATUS (*EFI_ALLOCATE_PAGES)(EFI_ALLOCATE_TYPE, EFI_MEMORY_TYPE, UINTN, EFI_PHYSICAL_ADDRESS *);

/* 80 */
typedef void (*EFI_RESTORE_TPL)(EFI_TPL);

/* 81 */
typedef EFI_TPL (*EFI_RAISE_TPL)(EFI_TPL);

/* 82 */
struct EFI_TABLE_HEADER
{
  UINT64 Signature;
  UINT32 Revision;
  UINT32 HeaderSize;
  UINT32 CRC32;
  UINT32 Reserved;
};

/* 83 */
typedef EFI_STATUS (*EFI_CREATE_EVENT_EX)(UINT32, EFI_TPL, EFI_EVENT_NOTIFY, const void *, const GUID *, EFI_EVENT *);

/* 84 */
struct EFI_BOOT_SERVICES
{
  EFI_TABLE_HEADER Hdr;
  EFI_RAISE_TPL RaiseTPL;
  EFI_RESTORE_TPL RestoreTPL;
  EFI_ALLOCATE_PAGES AllocatePages;
  EFI_FREE_PAGES FreePages;
  EFI_GET_MEMORY_MAP GetMemoryMap;
  EFI_ALLOCATE_POOL AllocatePool;
  EFI_FREE_POOL FreePool;
  EFI_CREATE_EVENT CreateEvent;
  EFI_SET_TIMER SetTimer;
  EFI_WAIT_FOR_EVENT WaitForEvent;
  EFI_SIGNAL_EVENT SignalEvent;
  EFI_CLOSE_EVENT CloseEvent;
  EFI_CHECK_EVENT CheckEvent;
  EFI_INSTALL_PROTOCOL_INTERFACE InstallProtocolInterface;
  EFI_REINSTALL_PROTOCOL_INTERFACE ReinstallProtocolInterface;
  EFI_UNINSTALL_PROTOCOL_INTERFACE UninstallProtocolInterface;
  EFI_HANDLE_PROTOCOL HandleProtocol;
  void *Reserved;
  EFI_REGISTER_PROTOCOL_NOTIFY RegisterProtocolNotify;
  EFI_LOCATE_HANDLE LocateHandle;
  EFI_LOCATE_DEVICE_PATH LocateDevicePath;
  EFI_INSTALL_CONFIGURATION_TABLE InstallConfigurationTable;
  EFI_IMAGE_LOAD LoadImage;
  EFI_IMAGE_START StartImage;
  EFI_EXIT Exit;
  EFI_IMAGE_UNLOAD UnloadImage;
  EFI_EXIT_BOOT_SERVICES ExitBootServices;
  EFI_GET_NEXT_MONOTONIC_COUNT GetNextMonotonicCount;
  EFI_STALL Stall;
  EFI_SET_WATCHDOG_TIMER SetWatchdogTimer;
  EFI_CONNECT_CONTROLLER ConnectController;
  EFI_DISCONNECT_CONTROLLER DisconnectController;
  EFI_OPEN_PROTOCOL OpenProtocol;
  EFI_CLOSE_PROTOCOL CloseProtocol;
  EFI_OPEN_PROTOCOL_INFORMATION OpenProtocolInformation;
  EFI_PROTOCOLS_PER_HANDLE ProtocolsPerHandle;
  EFI_LOCATE_HANDLE_BUFFER LocateHandleBuffer;
  EFI_LOCATE_PROTOCOL LocateProtocol;
  EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES InstallMultipleProtocolInterfaces;
  EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES UninstallMultipleProtocolInterfaces;
  EFI_CALCULATE_CRC32 CalculateCrc32;
  EFI_COPY_MEM CopyMem;
  EFI_SET_MEM SetMem;
  EFI_CREATE_EVENT_EX CreateEventEx;
};

/* 85 */
enum EFI_RESET_TYPE : __int32
{
  EfiResetCold = 0x0,
  EfiResetWarm = 0x1,
  EfiResetShutdown = 0x2,
  EfiResetPlatformSpecific = 0x3,
};

/* 86 */
struct EFI_CAPSULE_HEADER
{
  EFI_GUID CapsuleGuid;
  UINT32 HeaderSize;
  UINT32 Flags;
  UINT32 CapsuleImageSize;
};

/* 87 */
typedef EFI_STATUS (*EFI_QUERY_CAPSULE_CAPABILITIES)(EFI_CAPSULE_HEADER **, UINTN, UINT64 *, EFI_RESET_TYPE *);

/* 88 */
typedef EFI_STATUS (*EFI_UPDATE_CAPSULE)(EFI_CAPSULE_HEADER **, UINTN, EFI_PHYSICAL_ADDRESS);

/* 89 */
typedef void (*EFI_RESET_SYSTEM)(EFI_RESET_TYPE, EFI_STATUS, UINTN, void *);

/* 90 */
typedef EFI_STATUS (*EFI_GET_NEXT_HIGH_MONO_COUNT)(UINT32 *);

/* 91 */
typedef EFI_STATUS (*EFI_SET_VARIABLE)(CHAR16 *, EFI_GUID *, UINT32, UINTN, void *);

/* 92 */
typedef EFI_STATUS (*EFI_GET_NEXT_VARIABLE_NAME)(UINTN *, CHAR16 *, EFI_GUID *);

/* 93 */
typedef EFI_STATUS (*EFI_GET_VARIABLE)(CHAR16 *, EFI_GUID *, UINT32 *, UINTN *, void *);

/* 94 */
typedef EFI_STATUS (*EFI_CONVERT_POINTER)(UINTN, void **);

/* 95 */
typedef EFI_STATUS (*EFI_SET_VIRTUAL_ADDRESS_MAP)(UINTN, UINTN, UINT32, EFI_MEMORY_DESCRIPTOR *);

/* 96 */
typedef __int16 INT16;

/* 97 */
struct EFI_TIME
{
  UINT16 Year;
  UINT8 Month;
  UINT8 Day;
  UINT8 Hour;
  UINT8 Minute;
  UINT8 Second;
  UINT8 Pad1;
  UINT32 Nanosecond;
  INT16 TimeZone;
  UINT8 Daylight;
  UINT8 Pad2;
};

/* 98 */
typedef EFI_STATUS (*EFI_SET_WAKEUP_TIME)(BOOLEAN, EFI_TIME *);

/* 99 */
typedef EFI_STATUS (*EFI_GET_WAKEUP_TIME)(BOOLEAN *, BOOLEAN *, EFI_TIME *);

/* 100 */
typedef EFI_STATUS (*EFI_SET_TIME)(EFI_TIME *);

/* 101 */
struct __attribute__((aligned(4))) EFI_TIME_CAPABILITIES
{
  UINT32 Resolution;
  UINT32 Accuracy;
  BOOLEAN SetsToZero;
};

/* 102 */
typedef EFI_STATUS (*EFI_GET_TIME)(EFI_TIME *, EFI_TIME_CAPABILITIES *);

/* 103 */
typedef EFI_STATUS (*EFI_QUERY_VARIABLE_INFO)(UINT32, UINT64 *, UINT64 *, UINT64 *);

/* 104 */
struct EFI_RUNTIME_SERVICES
{
  EFI_TABLE_HEADER Hdr;
  EFI_GET_TIME GetTime;
  EFI_SET_TIME SetTime;
  EFI_GET_WAKEUP_TIME GetWakeupTime;
  EFI_SET_WAKEUP_TIME SetWakeupTime;
  EFI_SET_VIRTUAL_ADDRESS_MAP SetVirtualAddressMap;
  EFI_CONVERT_POINTER ConvertPointer;
  EFI_GET_VARIABLE GetVariable;
  EFI_GET_NEXT_VARIABLE_NAME GetNextVariableName;
  EFI_SET_VARIABLE SetVariable;
  EFI_GET_NEXT_HIGH_MONO_COUNT GetNextHighMonotonicCount;
  EFI_RESET_SYSTEM ResetSystem;
  EFI_UPDATE_CAPSULE UpdateCapsule;
  EFI_QUERY_CAPSULE_CAPABILITIES QueryCapsuleCapabilities;
  EFI_QUERY_VARIABLE_INFO QueryVariableInfo;
};

/* 105 */
typedef int INT32;

/* 106 */
struct __attribute__((aligned(4))) EFI_SIMPLE_TEXT_OUTPUT_MODE
{
  INT32 MaxMode;
  INT32 Mode;
  INT32 Attribute;
  INT32 CursorColumn;
  INT32 CursorRow;
  BOOLEAN CursorVisible;
};

/* 108 */
typedef _EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;

/* 107 */
typedef EFI_STATUS (*EFI_TEXT_ENABLE_CURSOR)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, BOOLEAN);

/* 110 */
typedef EFI_STATUS (*EFI_TEXT_RESET)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, BOOLEAN);

/* 111 */
typedef EFI_STATUS (*EFI_TEXT_STRING)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, CHAR16 *);

/* 112 */
typedef EFI_STATUS (*EFI_TEXT_TEST_STRING)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, CHAR16 *);

/* 113 */
typedef EFI_STATUS (*EFI_TEXT_QUERY_MODE)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, UINTN, UINTN *, UINTN *);

/* 114 */
typedef EFI_STATUS (*EFI_TEXT_SET_MODE)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, UINTN);

/* 115 */
typedef EFI_STATUS (*EFI_TEXT_SET_ATTRIBUTE)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, UINTN);

/* 116 */
typedef EFI_STATUS (*EFI_TEXT_CLEAR_SCREEN)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *);

/* 117 */
typedef EFI_STATUS (*EFI_TEXT_SET_CURSOR_POSITION)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, UINTN, UINTN);

/* 109 */
struct _EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
{
  EFI_TEXT_RESET Reset;
  EFI_TEXT_STRING OutputString;
  EFI_TEXT_TEST_STRING TestString;
  EFI_TEXT_QUERY_MODE QueryMode;
  EFI_TEXT_SET_MODE SetMode;
  EFI_TEXT_SET_ATTRIBUTE SetAttribute;
  EFI_TEXT_CLEAR_SCREEN ClearScreen;
  EFI_TEXT_SET_CURSOR_POSITION SetCursorPosition;
  EFI_TEXT_ENABLE_CURSOR EnableCursor;
  EFI_SIMPLE_TEXT_OUTPUT_MODE *Mode;
};

/* 118 */
struct EFI_INPUT_KEY
{
  UINT16 ScanCode;
  CHAR16 UnicodeChar;
};

/* 120 */
typedef _EFI_SIMPLE_TEXT_INPUT_PROTOCOL EFI_SIMPLE_TEXT_INPUT_PROTOCOL;

/* 119 */
typedef EFI_STATUS (*EFI_INPUT_READ_KEY)(EFI_SIMPLE_TEXT_INPUT_PROTOCOL *, EFI_INPUT_KEY *);

/* 122 */
typedef EFI_STATUS (*EFI_INPUT_RESET)(EFI_SIMPLE_TEXT_INPUT_PROTOCOL *, BOOLEAN);

/* 121 */
struct _EFI_SIMPLE_TEXT_INPUT_PROTOCOL
{
  EFI_INPUT_RESET Reset;
  EFI_INPUT_READ_KEY ReadKeyStroke;
  EFI_EVENT WaitForKey;
};

/* 123 */
struct EFI_CONFIGURATION_TABLE
{
  EFI_GUID VendorGuid;
  void *VendorTable;
};

/* 124 */
struct EFI_SYSTEM_TABLE
{
  EFI_TABLE_HEADER Hdr;
  CHAR16 *FirmwareVendor;
  UINT32 FirmwareRevision;
  EFI_HANDLE ConsoleInHandle;
  EFI_SIMPLE_TEXT_INPUT_PROTOCOL *ConIn;
  EFI_HANDLE ConsoleOutHandle;
  EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *ConOut;
  EFI_HANDLE StandardErrorHandle;
  EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *StdErr;
  EFI_RUNTIME_SERVICES *RuntimeServices;
  EFI_BOOT_SERVICES *BootServices;
  UINTN NumberOfTableEntries;
  EFI_CONFIGURATION_TABLE *ConfigurationTable;
};

/* 125 */
typedef void *EFI_HII_HANDLE;

/* 126 */
typedef UINT16 EFI_STRING_ID;

/* 127 */
struct EFI_DRIVER_HEALTH_HII_MESSAGE
{
  EFI_HII_HANDLE HiiHandle;
  EFI_STRING_ID StringId;
  UINT64 MessageCode;
};

/* 128 */
enum EFI_DRIVER_HEALTH_STATUS : __int32
{
  EfiDriverHealthStatusHealthy = 0x0,
  EfiDriverHealthStatusRepairRequired = 0x1,
  EfiDriverHealthStatusConfigurationRequired = 0x2,
  EfiDriverHealthStatusFailed = 0x3,
  EfiDriverHealthStatusReconnectRequired = 0x4,
  EfiDriverHealthStatusRebootRequired = 0x5,
};

/* 129 */
typedef EFI_STATUS (*EFI_DRIVER_HEALTH_REPAIR_NOTIFY)(UINTN, UINTN);

/* 131 */
typedef _EFI_DRIVER_HEALTH_PROTOCOL EFI_DRIVER_HEALTH_PROTOCOL;

/* 130 */
typedef EFI_STATUS (*EFI_DRIVER_HEALTH_GET_HEALTH_STATUS)(EFI_DRIVER_HEALTH_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, EFI_DRIVER_HEALTH_STATUS *, EFI_DRIVER_HEALTH_HII_MESSAGE **, EFI_HII_HANDLE *);

/* 133 */
typedef EFI_STATUS (*EFI_DRIVER_HEALTH_REPAIR)(EFI_DRIVER_HEALTH_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, EFI_DRIVER_HEALTH_REPAIR_NOTIFY);

/* 132 */
struct _EFI_DRIVER_HEALTH_PROTOCOL
{
  EFI_DRIVER_HEALTH_GET_HEALTH_STATUS GetHealthStatus;
  EFI_DRIVER_HEALTH_REPAIR Repair;
};

/* 134 */
struct __attribute__((aligned(8))) EFI_BOOT_MANAGER_DRIVER_HEALTH_INFO
{
  EFI_DRIVER_HEALTH_PROTOCOL *DriverHealth;
  EFI_HANDLE DriverHealthHandle;
  EFI_HANDLE ControllerHandle;
  EFI_HANDLE ChildHandle;
  EFI_DRIVER_HEALTH_HII_MESSAGE *MessageList;
  EFI_HII_HANDLE HiiHandle;
  EFI_DRIVER_HEALTH_STATUS HealthStatus;
};

/* 135 */
struct $7CD5BD5D607F45BF2F2ECA1CADC5F7BB
{
  unsigned __int32 Revision : 8;
  unsigned __int32 ShiftPressed : 1;
  unsigned __int32 ControlPressed : 1;
  unsigned __int32 AltPressed : 1;
  unsigned __int32 LogoPressed : 1;
  unsigned __int32 MenuPressed : 1;
  unsigned __int32 SysReqPressed : 1;
  unsigned __int32 Reserved : 16;
  unsigned __int32 InputKeyCount : 2;
};

/* 136 */
union EFI_BOOT_KEY_DATA
{
  $7CD5BD5D607F45BF2F2ECA1CADC5F7BB Options;
  UINT32 PackedValue;
};

/* 137 */
struct EFI_BOOT_MANAGER_KEY_OPTION
{
  EFI_BOOT_KEY_DATA KeyData;
  UINT32 BootOptionCrc;
  UINT16 BootOption;
  EFI_INPUT_KEY Keys[3];
  UINT16 OptionNumber;
};

/* 139 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 138 */
struct _LIST_ENTRY
{
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};

/* 140 */
typedef UINT8 EFI_KEY_TOGGLE_STATE;

/* 141 */
struct __attribute__((aligned(4))) _EFI_KEY_STATE
{
  UINT32 KeyShiftState;
  EFI_KEY_TOGGLE_STATE KeyToggleState;
};

/* 142 */
typedef _EFI_KEY_STATE EFI_KEY_STATE;

/* 143 */
struct EFI_KEY_DATA
{
  EFI_INPUT_KEY Key;
  EFI_KEY_STATE KeyState;
};

/* 144 */
struct __attribute__((aligned(8))) BM_HOTKEY
{
  UINT32 Signature;
  LIST_ENTRY Link;
  BOOLEAN IsContinue;
  UINT16 BootOption;
  UINT8 CodeCount;
  UINT8 WaitingKey;
  EFI_KEY_DATA KeyData[3];
};

/* 145 */
typedef EFI_STATUS (*EFI_KEY_NOTIFY_FUNCTION)(EFI_KEY_DATA *);

/* 147 */
typedef _EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL;

/* 146 */
typedef EFI_STATUS (*EFI_REGISTER_KEYSTROKE_NOTIFY)(EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, EFI_KEY_DATA *, EFI_KEY_NOTIFY_FUNCTION, void **);

/* 149 */
typedef EFI_STATUS (*EFI_INPUT_RESET_EX)(EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, BOOLEAN);

/* 150 */
typedef EFI_STATUS (*EFI_INPUT_READ_KEY_EX)(EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, EFI_KEY_DATA *);

/* 151 */
typedef EFI_STATUS (*EFI_SET_STATE)(EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, EFI_KEY_TOGGLE_STATE *);

/* 152 */
typedef EFI_STATUS (*EFI_UNREGISTER_KEYSTROKE_NOTIFY)(EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, void *);

/* 148 */
struct _EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL
{
  EFI_INPUT_RESET_EX Reset;
  EFI_INPUT_READ_KEY_EX ReadKeyStrokeEx;
  EFI_EVENT WaitForKeyEx;
  EFI_SET_STATE SetState;
  EFI_REGISTER_KEYSTROKE_NOTIFY RegisterKeyNotify;
  EFI_UNREGISTER_KEYSTROKE_NOTIFY UnregisterKeyNotify;
};

/* 153 */
typedef char *VA_LIST;

/* 154 */
typedef INTN (*SORT_COMPARE)(const void *, const void *);

/* 155 */
typedef void (*BM_VARIABLE_VISITOR)(CHAR16 *, EFI_GUID *, void *);

/* 156 */
typedef CHAR16 *(*EFI_BOOT_MANAGER_BOOT_DESCRIPTION_HANDLER)(EFI_HANDLE, const CHAR16 *);

/* 157 */
enum BM_BOOT_TYPE : __int32
{
  BmAcpiFloppyBoot = 0x0,
  BmHardwareDeviceBoot = 0x1,
  BmMessageAtapiBoot = 0x2,
  BmMessageSataBoot = 0x3,
  BmMessageUsbBoot = 0x4,
  BmMessageScsiBoot = 0x5,
  BmMiscBoot = 0x6,
};

/* 158 */
struct __attribute__((packed)) __attribute__((aligned(2))) HARDDRIVE_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 PartitionNumber;
  UINT64 PartitionStart;
  UINT64 PartitionSize;
  UINT8 Signature[16];
  UINT8 MBRType;
  UINT8 SignatureType;
};

/* 159 */
struct POOL_PRINT
{
  CHAR16 *Str;
  UINTN Count;
  UINTN Capacity;
};

/* 162 */
typedef _EFI_BDS_ARCH_PROTOCOL EFI_BDS_ARCH_PROTOCOL;

/* 161 */
typedef void (*EFI_BDS_ENTRY)(EFI_BDS_ARCH_PROTOCOL *);

/* 160 */
struct _EFI_BDS_ARCH_PROTOCOL
{
  EFI_BDS_ENTRY Entry;
};

/* 163 */
typedef char CHAR8;

/* 164 */
struct EFI_GRAPHICS_OUTPUT_BLT_PIXEL
{
  UINT8 Blue;
  UINT8 Green;
  UINT8 Red;
  UINT8 Reserved;
};

/* 165 */
typedef UINT32 EFI_BOOT_MODE;

/* 166 */
enum CONSOLE_TYPE : __int32
{
  ConIn = 0x0,
  ConOut = 0x1,
  ErrOut = 0x2,
  ConInDev = 0x3,
  ConOutDev = 0x4,
  ErrOutDev = 0x5,
  ConsoleTypeMax = 0x6,
};

/* 167 */
struct MEDIA_FW_VOL_FILEPATH_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID FvFileName;
};

/* 168 */
typedef CHAR16 *EFI_STRING;

/* 169 */
enum EFI_LOCK_STATE : __int32
{
  EfiLockUninitialized = 0x0,
  EfiLockReleased = 0x1,
  EfiLockAcquired = 0x2,
};

/* 170 */
struct __attribute__((aligned(8))) EFI_LOCK
{
  EFI_TPL Tpl;
  EFI_TPL OwnerTpl;
  EFI_LOCK_STATE Lock;
};

/* 171 */
typedef UINT8 EFI_SECTION_TYPE;

/* 172 */
typedef UINT32 EFI_STATUS_CODE_VALUE;

/* 173 */
typedef UINT32 EFI_STATUS_CODE_TYPE;

/* 174 */
struct BDS_CONSOLE_CONNECT_ENTRY
{
  EFI_DEVICE_PATH_PROTOCOL *DevicePath;
  UINTN ConnectType;
};

/* 175 */
typedef CHAR16 *(*BM_GET_BOOT_DESCRIPTION)(EFI_HANDLE);

/* 176 */
typedef void (*EFI_BOOT_MANAGER_REFRESH_LEGACY_BOOT_OPTION)(void);

/* 177 */
typedef void (*EFI_BOOT_MANAGER_LEGACY_BOOT)(EFI_BOOT_MANAGER_LOAD_OPTION *);

/* 178 */
typedef EFI_STATUS (*EFI_RAM_DISK_REGISTER_RAMDISK)(UINT64, UINT64, EFI_GUID *, EFI_DEVICE_PATH *, EFI_DEVICE_PATH_PROTOCOL **);

/* 179 */
typedef EFI_STATUS (*EFI_RAM_DISK_UNREGISTER_RAMDISK)(EFI_DEVICE_PATH_PROTOCOL *);

/* 180 */
struct _EFI_RAM_DISK_PROTOCOL
{
  EFI_RAM_DISK_REGISTER_RAMDISK Register;
  EFI_RAM_DISK_UNREGISTER_RAMDISK Unregister;
};

/* 181 */
typedef _EFI_RAM_DISK_PROTOCOL EFI_RAM_DISK_PROTOCOL;

/* 182 */
struct VENDOR_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID Guid;
};

/* 183 */
struct EMU_VENDOR_DEVICE_PATH_NODE
{
  VENDOR_DEVICE_PATH VendorDevicePath;
  UINT32 Instance;
};

/* 184 */
struct EMU_PLATFORM_UGA_DEVICE_PATH
{
  EMU_VENDOR_DEVICE_PATH_NODE EmuBus;
  EMU_VENDOR_DEVICE_PATH_NODE EmuGraphicsWindow;
  EFI_DEVICE_PATH_PROTOCOL End;
};

/* 185 */
struct EFI_HII_PACKAGE_HEADER
{
  unsigned __int32 Length : 24;
  unsigned __int32 Type : 8;
};

/* 186 */
typedef UINTN EFI_BROWSER_ACTION_REQUEST;

/* 187 */
struct EFI_SCREEN_DESCRIPTOR
{
  UINTN LeftColumn;
  UINTN RightColumn;
  UINTN TopRow;
  UINTN BottomRow;
};

/* 188 */
typedef UINT16 EFI_FORM_ID;

/* 189 */
typedef _EFI_FORM_BROWSER2_PROTOCOL EFI_FORM_BROWSER2_PROTOCOL;

/* 191 */
typedef EFI_STATUS (*EFI_SEND_FORM2)(const EFI_FORM_BROWSER2_PROTOCOL *, EFI_HII_HANDLE *, UINTN, EFI_GUID *, EFI_FORM_ID, const EFI_SCREEN_DESCRIPTOR *, EFI_BROWSER_ACTION_REQUEST *);

/* 192 */
typedef EFI_STATUS (*EFI_BROWSER_CALLBACK2)(const EFI_FORM_BROWSER2_PROTOCOL *, UINTN *, EFI_STRING, BOOLEAN, const GUID *, const CHAR16 *);

/* 190 */
struct _EFI_FORM_BROWSER2_PROTOCOL
{
  EFI_SEND_FORM2 SendForm;
  EFI_BROWSER_CALLBACK2 BrowserCallback;
};

/* 193 */
typedef EFI_STATUS (*EFI_PROCESS_FIRMWARE_VOLUME)(const void *, UINTN, EFI_HANDLE *);

/* 194 */
typedef EFI_STATUS (*EFI_TRUST)(EFI_HANDLE, const GUID *);

/* 195 */
typedef EFI_STATUS (*EFI_SCHEDULE)(EFI_HANDLE, const GUID *);

/* 196 */
typedef EFI_STATUS (*EFI_DISPATCH)(void);

/* 197 */
enum EFI_GCD_IO_TYPE : __int32
{
  EfiGcdIoTypeNonExistent = 0x0,
  EfiGcdIoTypeReserved = 0x1,
  EfiGcdIoTypeIo = 0x2,
  EfiGcdIoTypeMaximum = 0x3,
};

/* 198 */
struct EFI_GCD_IO_SPACE_DESCRIPTOR
{
  EFI_PHYSICAL_ADDRESS BaseAddress;
  UINT64 Length;
  EFI_GCD_IO_TYPE GcdIoType;
  EFI_HANDLE ImageHandle;
  EFI_HANDLE DeviceHandle;
};

/* 199 */
typedef EFI_STATUS (*EFI_GET_IO_SPACE_MAP)(UINTN *, EFI_GCD_IO_SPACE_DESCRIPTOR **);

/* 200 */
typedef EFI_STATUS (*EFI_GET_IO_SPACE_DESCRIPTOR)(EFI_PHYSICAL_ADDRESS, EFI_GCD_IO_SPACE_DESCRIPTOR *);

/* 201 */
typedef EFI_STATUS (*EFI_REMOVE_IO_SPACE)(EFI_PHYSICAL_ADDRESS, UINT64);

/* 202 */
typedef EFI_STATUS (*EFI_FREE_IO_SPACE)(EFI_PHYSICAL_ADDRESS, UINT64);

/* 203 */
enum EFI_GCD_ALLOCATE_TYPE : __int32
{
  EfiGcdAllocateAnySearchBottomUp = 0x0,
  EfiGcdAllocateMaxAddressSearchBottomUp = 0x1,
  EfiGcdAllocateAddress = 0x2,
  EfiGcdAllocateAnySearchTopDown = 0x3,
  EfiGcdAllocateMaxAddressSearchTopDown = 0x4,
  EfiGcdMaxAllocateType = 0x5,
};

/* 204 */
typedef EFI_STATUS (*EFI_ALLOCATE_IO_SPACE)(EFI_GCD_ALLOCATE_TYPE, EFI_GCD_IO_TYPE, UINTN, UINT64, EFI_PHYSICAL_ADDRESS *, EFI_HANDLE, EFI_HANDLE);

/* 205 */
typedef EFI_STATUS (*EFI_ADD_IO_SPACE)(EFI_GCD_IO_TYPE, EFI_PHYSICAL_ADDRESS, UINT64);

/* 206 */
enum EFI_GCD_MEMORY_TYPE : __int32
{
  EfiGcdMemoryTypeNonExistent = 0x0,
  EfiGcdMemoryTypeReserved = 0x1,
  EfiGcdMemoryTypeSystemMemory = 0x2,
  EfiGcdMemoryTypeMemoryMappedIo = 0x3,
  EfiGcdMemoryTypePersistent = 0x4,
  EfiGcdMemoryTypePersistentMemory = 0x4,
  EfiGcdMemoryTypeMoreReliable = 0x5,
  EfiGcdMemoryTypeMaximum = 0x6,
};

/* 207 */
struct EFI_GCD_MEMORY_SPACE_DESCRIPTOR
{
  EFI_PHYSICAL_ADDRESS BaseAddress;
  UINT64 Length;
  UINT64 Capabilities;
  UINT64 Attributes;
  EFI_GCD_MEMORY_TYPE GcdMemoryType;
  EFI_HANDLE ImageHandle;
  EFI_HANDLE DeviceHandle;
};

/* 208 */
typedef EFI_STATUS (*EFI_GET_MEMORY_SPACE_MAP)(UINTN *, EFI_GCD_MEMORY_SPACE_DESCRIPTOR **);

/* 209 */
typedef EFI_STATUS (*EFI_SET_MEMORY_SPACE_ATTRIBUTES)(EFI_PHYSICAL_ADDRESS, UINT64, UINT64);

/* 210 */
typedef EFI_STATUS (*EFI_GET_MEMORY_SPACE_DESCRIPTOR)(EFI_PHYSICAL_ADDRESS, EFI_GCD_MEMORY_SPACE_DESCRIPTOR *);

/* 211 */
typedef EFI_STATUS (*EFI_REMOVE_MEMORY_SPACE)(EFI_PHYSICAL_ADDRESS, UINT64);

/* 212 */
typedef EFI_STATUS (*EFI_FREE_MEMORY_SPACE)(EFI_PHYSICAL_ADDRESS, UINT64);

/* 213 */
typedef EFI_STATUS (*EFI_ALLOCATE_MEMORY_SPACE)(EFI_GCD_ALLOCATE_TYPE, EFI_GCD_MEMORY_TYPE, UINTN, UINT64, EFI_PHYSICAL_ADDRESS *, EFI_HANDLE, EFI_HANDLE);

/* 214 */
typedef EFI_STATUS (*EFI_ADD_MEMORY_SPACE)(EFI_GCD_MEMORY_TYPE, EFI_PHYSICAL_ADDRESS, UINT64, UINT64);

/* 215 */
typedef EFI_STATUS (*EFI_SET_MEMORY_SPACE_CAPABILITIES)(EFI_PHYSICAL_ADDRESS, UINT64, UINT64);

/* 216 */
struct DXE_SERVICES
{
  EFI_TABLE_HEADER Hdr;
  EFI_ADD_MEMORY_SPACE AddMemorySpace;
  EFI_ALLOCATE_MEMORY_SPACE AllocateMemorySpace;
  EFI_FREE_MEMORY_SPACE FreeMemorySpace;
  EFI_REMOVE_MEMORY_SPACE RemoveMemorySpace;
  EFI_GET_MEMORY_SPACE_DESCRIPTOR GetMemorySpaceDescriptor;
  EFI_SET_MEMORY_SPACE_ATTRIBUTES SetMemorySpaceAttributes;
  EFI_GET_MEMORY_SPACE_MAP GetMemorySpaceMap;
  EFI_ADD_IO_SPACE AddIoSpace;
  EFI_ALLOCATE_IO_SPACE AllocateIoSpace;
  EFI_FREE_IO_SPACE FreeIoSpace;
  EFI_REMOVE_IO_SPACE RemoveIoSpace;
  EFI_GET_IO_SPACE_DESCRIPTOR GetIoSpaceDescriptor;
  EFI_GET_IO_SPACE_MAP GetIoSpaceMap;
  EFI_DISPATCH Dispatch;
  EFI_SCHEDULE Schedule;
  EFI_TRUST Trust;
  EFI_PROCESS_FIRMWARE_VOLUME ProcessFirmwareVolume;
  EFI_SET_MEMORY_SPACE_CAPABILITIES SetMemorySpaceCapabilities;
};

/* 217 */
typedef DXE_SERVICES EFI_DXE_SERVICES;

/* 219 */
typedef _EFI_HII_CONFIG_ROUTING_PROTOCOL EFI_HII_CONFIG_ROUTING_PROTOCOL;

/* 218 */
typedef EFI_STATUS (*EFI_HII_BLOCK_TO_CONFIG)(const EFI_HII_CONFIG_ROUTING_PROTOCOL *, EFI_STRING, const UINT8 *, UINTN, EFI_STRING *, EFI_STRING *);

/* 221 */
typedef EFI_STATUS (*EFI_HII_EXTRACT_CONFIG)(const EFI_HII_CONFIG_ROUTING_PROTOCOL *, EFI_STRING, EFI_STRING *, EFI_STRING *);

/* 222 */
typedef EFI_STATUS (*EFI_HII_EXPORT_CONFIG)(const EFI_HII_CONFIG_ROUTING_PROTOCOL *, EFI_STRING *);

/* 223 */
typedef EFI_STATUS (*EFI_HII_ROUTE_CONFIG)(const EFI_HII_CONFIG_ROUTING_PROTOCOL *, EFI_STRING, EFI_STRING *);

/* 224 */
typedef EFI_STATUS (*EFI_HII_CONFIG_TO_BLOCK)(const EFI_HII_CONFIG_ROUTING_PROTOCOL *, EFI_STRING, UINT8 *, UINTN *, EFI_STRING *);

/* 225 */
typedef EFI_STATUS (*EFI_HII_GET_ALT_CFG)(const EFI_HII_CONFIG_ROUTING_PROTOCOL *, EFI_STRING, const GUID *, EFI_STRING, const EFI_DEVICE_PATH_PROTOCOL *, const UINT16 *, EFI_STRING *);

/* 220 */
struct _EFI_HII_CONFIG_ROUTING_PROTOCOL
{
  EFI_HII_EXTRACT_CONFIG ExtractConfig;
  EFI_HII_EXPORT_CONFIG ExportConfig;
  EFI_HII_ROUTE_CONFIG RouteConfig;
  EFI_HII_BLOCK_TO_CONFIG BlockToConfig;
  EFI_HII_CONFIG_TO_BLOCK ConfigToBlock;
  EFI_HII_GET_ALT_CFG GetAltConfig;
};

/* 226 */
struct __attribute__((packed)) __attribute__((aligned(1))) EFI_HII_KEYBOARD_LAYOUT
{
  UINT16 LayoutLength;
  EFI_GUID Guid;
  UINT32 LayoutDescriptorStringOffset;
  UINT8 DescriptorCount;
};

/* 227 */
typedef UINTN EFI_HII_DATABASE_NOTIFY_TYPE;

/* 228 */
typedef EFI_STATUS (*EFI_HII_DATABASE_NOTIFY)(UINT8, const GUID *, const EFI_HII_PACKAGE_HEADER *, EFI_HII_HANDLE, EFI_HII_DATABASE_NOTIFY_TYPE);

/* 229 */
struct EFI_HII_PACKAGE_LIST_HEADER
{
  EFI_GUID PackageListGuid;
  UINT32 PackageLength;
};

/* 231 */
typedef _EFI_HII_DATABASE_PROTOCOL EFI_HII_DATABASE_PROTOCOL;

/* 230 */
typedef EFI_STATUS (*EFI_HII_GET_KEYBOARD_LAYOUT)(const EFI_HII_DATABASE_PROTOCOL *, const GUID *, UINT16 *, EFI_HII_KEYBOARD_LAYOUT *);

/* 233 */
typedef EFI_STATUS (*EFI_HII_DATABASE_NEW_PACK)(const EFI_HII_DATABASE_PROTOCOL *, const EFI_HII_PACKAGE_LIST_HEADER *, EFI_HANDLE, EFI_HII_HANDLE *);

/* 234 */
typedef EFI_STATUS (*EFI_HII_DATABASE_REMOVE_PACK)(const EFI_HII_DATABASE_PROTOCOL *, EFI_HII_HANDLE);

/* 235 */
typedef EFI_STATUS (*EFI_HII_DATABASE_UPDATE_PACK)(const EFI_HII_DATABASE_PROTOCOL *, EFI_HII_HANDLE, const EFI_HII_PACKAGE_LIST_HEADER *);

/* 236 */
typedef EFI_STATUS (*EFI_HII_DATABASE_LIST_PACKS)(const EFI_HII_DATABASE_PROTOCOL *, UINT8, const GUID *, UINTN *, EFI_HII_HANDLE *);

/* 237 */
typedef EFI_STATUS (*EFI_HII_DATABASE_EXPORT_PACKS)(const EFI_HII_DATABASE_PROTOCOL *, EFI_HII_HANDLE, UINTN *, EFI_HII_PACKAGE_LIST_HEADER *);

/* 238 */
typedef EFI_STATUS (*EFI_HII_DATABASE_REGISTER_NOTIFY)(const EFI_HII_DATABASE_PROTOCOL *, UINT8, const GUID *, EFI_HII_DATABASE_NOTIFY, EFI_HII_DATABASE_NOTIFY_TYPE, EFI_HANDLE *);

/* 239 */
typedef EFI_STATUS (*EFI_HII_DATABASE_UNREGISTER_NOTIFY)(const EFI_HII_DATABASE_PROTOCOL *, EFI_HANDLE);

/* 240 */
typedef EFI_STATUS (*EFI_HII_FIND_KEYBOARD_LAYOUTS)(const EFI_HII_DATABASE_PROTOCOL *, UINT16 *, EFI_GUID *);

/* 241 */
typedef EFI_STATUS (*EFI_HII_SET_KEYBOARD_LAYOUT)(const EFI_HII_DATABASE_PROTOCOL *, const GUID *);

/* 242 */
typedef EFI_STATUS (*EFI_HII_DATABASE_GET_PACK_HANDLE)(const EFI_HII_DATABASE_PROTOCOL *, EFI_HII_HANDLE, EFI_HANDLE *);

/* 232 */
struct _EFI_HII_DATABASE_PROTOCOL
{
  EFI_HII_DATABASE_NEW_PACK NewPackageList;
  EFI_HII_DATABASE_REMOVE_PACK RemovePackageList;
  EFI_HII_DATABASE_UPDATE_PACK UpdatePackageList;
  EFI_HII_DATABASE_LIST_PACKS ListPackageLists;
  EFI_HII_DATABASE_EXPORT_PACKS ExportPackageLists;
  EFI_HII_DATABASE_REGISTER_NOTIFY RegisterPackageNotify;
  EFI_HII_DATABASE_UNREGISTER_NOTIFY UnregisterPackageNotify;
  EFI_HII_FIND_KEYBOARD_LAYOUTS FindKeyboardLayouts;
  EFI_HII_GET_KEYBOARD_LAYOUT GetKeyboardLayout;
  EFI_HII_SET_KEYBOARD_LAYOUT SetKeyboardLayout;
  EFI_HII_DATABASE_GET_PACK_HANDLE GetPackageListHandle;
};

/* 243 */
enum EFI_GRAPHICS_OUTPUT_BLT_OPERATION : __int32
{
  EfiBltVideoFill = 0x0,
  EfiBltVideoToBltBuffer = 0x1,
  EfiBltBufferToVideo = 0x2,
  EfiBltVideoToVideo = 0x3,
  EfiGraphicsOutputBltOperationMax = 0x4,
};

/* 244 */
struct EFI_PIXEL_BITMASK
{
  UINT32 RedMask;
  UINT32 GreenMask;
  UINT32 BlueMask;
  UINT32 ReservedMask;
};

/* 245 */
enum EFI_GRAPHICS_PIXEL_FORMAT : __int32
{
  PixelRedGreenBlueReserved8BitPerColor = 0x0,
  PixelBlueGreenRedReserved8BitPerColor = 0x1,
  PixelBitMask = 0x2,
  PixelBltOnly = 0x3,
  PixelFormatMax = 0x4,
};

/* 246 */
struct EFI_GRAPHICS_OUTPUT_MODE_INFORMATION
{
  UINT32 Version;
  UINT32 HorizontalResolution;
  UINT32 VerticalResolution;
  EFI_GRAPHICS_PIXEL_FORMAT PixelFormat;
  EFI_PIXEL_BITMASK PixelInformation;
  UINT32 PixelsPerScanLine;
};

/* 247 */
struct EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE
{
  UINT32 MaxMode;
  UINT32 Mode;
  EFI_GRAPHICS_OUTPUT_MODE_INFORMATION *Info;
  UINTN SizeOfInfo;
  EFI_PHYSICAL_ADDRESS FrameBufferBase;
  UINTN FrameBufferSize;
};

/* 249 */
typedef _EFI_GRAPHICS_OUTPUT_PROTOCOL EFI_GRAPHICS_OUTPUT_PROTOCOL;

/* 248 */
typedef EFI_STATUS (*EFI_GRAPHICS_OUTPUT_PROTOCOL_BLT)(EFI_GRAPHICS_OUTPUT_PROTOCOL *, EFI_GRAPHICS_OUTPUT_BLT_PIXEL *, EFI_GRAPHICS_OUTPUT_BLT_OPERATION, UINTN, UINTN, UINTN, UINTN, UINTN, UINTN, UINTN);

/* 251 */
typedef EFI_STATUS (*EFI_GRAPHICS_OUTPUT_PROTOCOL_QUERY_MODE)(EFI_GRAPHICS_OUTPUT_PROTOCOL *, UINT32, UINTN *, EFI_GRAPHICS_OUTPUT_MODE_INFORMATION **);

/* 252 */
typedef EFI_STATUS (*EFI_GRAPHICS_OUTPUT_PROTOCOL_SET_MODE)(EFI_GRAPHICS_OUTPUT_PROTOCOL *, UINT32);

/* 250 */
struct _EFI_GRAPHICS_OUTPUT_PROTOCOL
{
  EFI_GRAPHICS_OUTPUT_PROTOCOL_QUERY_MODE QueryMode;
  EFI_GRAPHICS_OUTPUT_PROTOCOL_SET_MODE SetMode;
  EFI_GRAPHICS_OUTPUT_PROTOCOL_BLT Blt;
  EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE *Mode;
};

/* 253 */
union $D02644F5AF368569337FDE871B31DB68
{
  EFI_GRAPHICS_OUTPUT_BLT_PIXEL *Bitmap;
  EFI_GRAPHICS_OUTPUT_PROTOCOL *Screen;
};

/* 254 */
struct _EFI_IMAGE_OUTPUT
{
  UINT16 Width;
  UINT16 Height;
  $D02644F5AF368569337FDE871B31DB68 Image;
};

/* 255 */
typedef _EFI_IMAGE_OUTPUT EFI_IMAGE_OUTPUT;

/* 256 */
struct _EFI_IMAGE_INPUT
{
  UINT32 Flags;
  UINT16 Width;
  UINT16 Height;
  EFI_GRAPHICS_OUTPUT_BLT_PIXEL *Bitmap;
};

/* 257 */
typedef _EFI_IMAGE_INPUT EFI_IMAGE_INPUT;

/* 258 */
typedef UINT32 EFI_HII_DRAW_FLAGS;

/* 259 */
typedef UINT16 EFI_IMAGE_ID;

/* 261 */
typedef _EFI_HII_IMAGE_PROTOCOL EFI_HII_IMAGE_PROTOCOL;

/* 260 */
typedef EFI_STATUS (*EFI_HII_SET_IMAGE)(const EFI_HII_IMAGE_PROTOCOL *, EFI_HII_HANDLE, EFI_IMAGE_ID, const EFI_IMAGE_INPUT *);

/* 263 */
typedef EFI_STATUS (*EFI_HII_NEW_IMAGE)(const EFI_HII_IMAGE_PROTOCOL *, EFI_HII_HANDLE, EFI_IMAGE_ID *, const EFI_IMAGE_INPUT *);

/* 264 */
typedef EFI_STATUS (*EFI_HII_GET_IMAGE)(const EFI_HII_IMAGE_PROTOCOL *, EFI_HII_HANDLE, EFI_IMAGE_ID, EFI_IMAGE_INPUT *);

/* 265 */
typedef EFI_STATUS (*EFI_HII_DRAW_IMAGE)(const EFI_HII_IMAGE_PROTOCOL *, EFI_HII_DRAW_FLAGS, const EFI_IMAGE_INPUT *, EFI_IMAGE_OUTPUT **, UINTN, UINTN);

/* 266 */
typedef EFI_STATUS (*EFI_HII_DRAW_IMAGE_ID)(const EFI_HII_IMAGE_PROTOCOL *, EFI_HII_DRAW_FLAGS, EFI_HII_HANDLE, EFI_IMAGE_ID, EFI_IMAGE_OUTPUT **, UINTN, UINTN);

/* 262 */
struct _EFI_HII_IMAGE_PROTOCOL
{
  EFI_HII_NEW_IMAGE NewImage;
  EFI_HII_GET_IMAGE GetImage;
  EFI_HII_SET_IMAGE SetImage;
  EFI_HII_DRAW_IMAGE DrawImage;
  EFI_HII_DRAW_IMAGE_ID DrawImageId;
};

/* 267 */
typedef UINT32 EFI_HII_FONT_STYLE;

/* 268 */
struct EFI_FONT_INFO
{
  EFI_HII_FONT_STYLE FontStyle;
  UINT16 FontSize;
  CHAR16 FontName[1];
};

/* 270 */
typedef _EFI_HII_STRING_PROTOCOL EFI_HII_STRING_PROTOCOL;

/* 269 */
typedef EFI_STATUS (*EFI_HII_SET_STRING)(const EFI_HII_STRING_PROTOCOL *, EFI_HII_HANDLE, EFI_STRING_ID, const CHAR8 *, EFI_STRING, const EFI_FONT_INFO *);

/* 272 */
typedef EFI_STATUS (*EFI_HII_NEW_STRING)(const EFI_HII_STRING_PROTOCOL *, EFI_HII_HANDLE, EFI_STRING_ID *, const CHAR8 *, const CHAR16 *, EFI_STRING, const EFI_FONT_INFO *);

/* 273 */
typedef EFI_STATUS (*EFI_HII_GET_STRING)(const EFI_HII_STRING_PROTOCOL *, const CHAR8 *, EFI_HII_HANDLE, EFI_STRING_ID, EFI_STRING, UINTN *, EFI_FONT_INFO **);

/* 274 */
typedef EFI_STATUS (*EFI_HII_GET_LANGUAGES)(const EFI_HII_STRING_PROTOCOL *, EFI_HII_HANDLE, CHAR8 *, UINTN *);

/* 275 */
typedef EFI_STATUS (*EFI_HII_GET_2ND_LANGUAGES)(const EFI_HII_STRING_PROTOCOL *, EFI_HII_HANDLE, const CHAR8 *, CHAR8 *, UINTN *);

/* 271 */
struct _EFI_HII_STRING_PROTOCOL
{
  EFI_HII_NEW_STRING NewString;
  EFI_HII_GET_STRING GetString;
  EFI_HII_SET_STRING SetString;
  EFI_HII_GET_LANGUAGES GetLanguages;
  EFI_HII_GET_2ND_LANGUAGES GetSecondaryLanguages;
};

/* 276 */
typedef UINT32 EFI_FONT_INFO_MASK;

/* 277 */
struct _EFI_FONT_DISPLAY_INFO
{
  EFI_GRAPHICS_OUTPUT_BLT_PIXEL ForegroundColor;
  EFI_GRAPHICS_OUTPUT_BLT_PIXEL BackgroundColor;
  EFI_FONT_INFO_MASK FontInfoMask;
  EFI_FONT_INFO FontInfo;
};

/* 278 */
typedef _EFI_FONT_DISPLAY_INFO EFI_FONT_DISPLAY_INFO;

/* 279 */
struct _EFI_HII_ROW_INFO
{
  UINTN StartIndex;
  UINTN EndIndex;
  UINTN LineHeight;
  UINTN LineWidth;
  UINTN BaselineOffset;
};

/* 280 */
typedef _EFI_HII_ROW_INFO EFI_HII_ROW_INFO;

/* 281 */
typedef UINT32 EFI_HII_OUT_FLAGS;

/* 282 */
typedef void *EFI_FONT_HANDLE;

/* 284 */
typedef _EFI_HII_FONT_PROTOCOL EFI_HII_FONT_PROTOCOL;

/* 283 */
typedef EFI_STATUS (*EFI_HII_STRING_ID_TO_IMAGE)(const EFI_HII_FONT_PROTOCOL *, EFI_HII_OUT_FLAGS, EFI_HII_HANDLE, EFI_STRING_ID, const CHAR8 *, const EFI_FONT_DISPLAY_INFO *, EFI_IMAGE_OUTPUT **, UINTN, UINTN, EFI_HII_ROW_INFO **, UINTN *, UINTN *);

/* 286 */
typedef EFI_STATUS (*EFI_HII_STRING_TO_IMAGE)(const EFI_HII_FONT_PROTOCOL *, EFI_HII_OUT_FLAGS, EFI_STRING, const EFI_FONT_DISPLAY_INFO *, EFI_IMAGE_OUTPUT **, UINTN, UINTN, EFI_HII_ROW_INFO **, UINTN *, UINTN *);

/* 287 */
typedef EFI_STATUS (*EFI_HII_GET_GLYPH)(const EFI_HII_FONT_PROTOCOL *, CHAR16, const EFI_FONT_DISPLAY_INFO *, EFI_IMAGE_OUTPUT **, UINTN *);

/* 288 */
typedef EFI_STATUS (*EFI_HII_GET_FONT_INFO)(const EFI_HII_FONT_PROTOCOL *, EFI_FONT_HANDLE *, const EFI_FONT_DISPLAY_INFO *, EFI_FONT_DISPLAY_INFO **, EFI_STRING);

/* 285 */
struct _EFI_HII_FONT_PROTOCOL
{
  EFI_HII_STRING_TO_IMAGE StringToImage;
  EFI_HII_STRING_ID_TO_IMAGE StringIdToImage;
  EFI_HII_GET_GLYPH GetGlyph;
  EFI_HII_GET_FONT_INFO GetFontInfo;
};

/* 289 */
struct UNICODE_WIDTH_ENTRY
{
  CHAR16 WChar;
  UINT32 Width;
};

/* 290 */
typedef EFI_DEVICE_PATH_PROTOCOL *(*DEVICE_PATH_FROM_TEXT)(CHAR16 *);

/* 291 */
struct DEVICE_PATH_FROM_TEXT_TABLE
{
  CHAR16 *DevicePathNodeText;
  DEVICE_PATH_FROM_TEXT Function;
};

/* 292 */
typedef void (*DEVICE_PATH_TO_TEXT)(POOL_PRINT *, void *, BOOLEAN, BOOLEAN);

/* 293 */
struct DEVICE_PATH_TO_TEXT_TABLE
{
  UINT8 Type;
  UINT8 SubType;
  DEVICE_PATH_TO_TEXT Function;
};

/* 294 */
struct DEVICE_PATH_TO_TEXT_GENERIC_TABLE
{
  UINT8 Type;
  CHAR16 *Text;
};

/* 295 */
struct IPv4_ADDRESS
{
  UINT8 Addr[4];
};

/* 296 */
struct IPv6_ADDRESS
{
  UINT8 Addr[16];
};

/* 297 */
struct EFI_STATUS_CODE_DATA
{
  UINT16 HeaderSize;
  UINT16 Size;
  EFI_GUID Type;
};

/* 298 */
typedef EFI_STATUS (*EFI_REPORT_STATUS_CODE)(EFI_STATUS_CODE_TYPE, EFI_STATUS_CODE_VALUE, UINT32, EFI_GUID *, EFI_STATUS_CODE_DATA *);

/* 299 */
struct _EFI_STATUS_CODE_PROTOCOL
{
  EFI_REPORT_STATUS_CODE ReportStatusCode;
};

/* 300 */
typedef _EFI_STATUS_CODE_PROTOCOL EFI_STATUS_CODE_PROTOCOL;

/* 301 */
enum EFI_PCD_TYPE : __int32
{
  EFI_PCD_TYPE_8 = 0x0,
  EFI_PCD_TYPE_16 = 0x1,
  EFI_PCD_TYPE_32 = 0x2,
  EFI_PCD_TYPE_64 = 0x3,
  EFI_PCD_TYPE_BOOL = 0x4,
  EFI_PCD_TYPE_PTR = 0x5,
};

/* 302 */
struct EFI_PCD_INFO
{
  EFI_PCD_TYPE PcdType;
  UINTN PcdSize;
  CHAR8 *PcdName;
};

/* 303 */
typedef EFI_STATUS (*EFI_GET_PCD_INFO_PROTOCOL_GET_INFO)(const GUID *, UINTN, EFI_PCD_INFO *);

/* 304 */
typedef UINTN (*EFI_GET_PCD_INFO_PROTOCOL_GET_SKU)(void);

/* 305 */
struct _EFI_GET_PCD_INFO_PROTOCOL
{
  EFI_GET_PCD_INFO_PROTOCOL_GET_INFO GetInfo;
  EFI_GET_PCD_INFO_PROTOCOL_GET_SKU GetSku;
};

/* 306 */
typedef _EFI_GET_PCD_INFO_PROTOCOL EFI_GET_PCD_INFO_PROTOCOL;

/* 307 */
typedef EFI_STATUS (*GET_PCD_INFO_PROTOCOL_GET_INFO_EX)(const GUID *, UINTN, EFI_PCD_INFO *);

/* 308 */
typedef EFI_STATUS (*GET_PCD_INFO_PROTOCOL_GET_INFO)(UINTN, EFI_PCD_INFO *);

/* 309 */
typedef UINTN (*GET_PCD_INFO_PROTOCOL_GET_SKU)(void);

/* 310 */
struct _GET_PCD_INFO_PROTOCOL
{
  GET_PCD_INFO_PROTOCOL_GET_INFO GetInfo;
  GET_PCD_INFO_PROTOCOL_GET_INFO_EX GetInfoEx;
  GET_PCD_INFO_PROTOCOL_GET_SKU GetSku;
};

/* 311 */
typedef _GET_PCD_INFO_PROTOCOL GET_PCD_INFO_PROTOCOL;

/* 312 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_GET_NEXT_TOKEN)(const GUID *, UINTN *);

/* 313 */
typedef void (*EFI_PCD_PROTOCOL_CALLBACK)(EFI_GUID *, UINTN, void *, UINTN);

/* 314 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_CANCEL_CALLBACK)(const GUID *, UINTN, EFI_PCD_PROTOCOL_CALLBACK);

/* 315 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_CALLBACK_ON_SET)(const GUID *, UINTN, EFI_PCD_PROTOCOL_CALLBACK);

/* 316 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_SET_BOOLEAN)(const GUID *, UINTN, BOOLEAN);

/* 317 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_SET_POINTER)(const GUID *, UINTN, UINTN *, void *);

/* 318 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_SET_64)(const GUID *, UINTN, UINT64);

/* 319 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_SET_32)(const GUID *, UINTN, UINT32);

/* 320 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_SET_16)(const GUID *, UINTN, UINT16);

/* 321 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_SET_8)(const GUID *, UINTN, UINT8);

/* 322 */
typedef UINTN (*EFI_PCD_PROTOCOL_GET_SIZE)(const GUID *, UINTN);

/* 323 */
typedef BOOLEAN (*EFI_PCD_PROTOCOL_GET_BOOLEAN)(const GUID *, UINTN);

/* 324 */
typedef void *(*EFI_PCD_PROTOCOL_GET_POINTER)(const GUID *, UINTN);

/* 325 */
typedef UINT64 (*EFI_PCD_PROTOCOL_GET_64)(const GUID *, UINTN);

/* 326 */
typedef UINT32 (*EFI_PCD_PROTOCOL_GET_32)(const GUID *, UINTN);

/* 327 */
typedef UINT16 (*EFI_PCD_PROTOCOL_GET_16)(const GUID *, UINTN);

/* 328 */
typedef UINT8 (*EFI_PCD_PROTOCOL_GET_8)(const GUID *, UINTN);

/* 329 */
typedef void (*EFI_PCD_PROTOCOL_SET_SKU)(UINTN);

/* 330 */
typedef EFI_STATUS (*EFI_PCD_PROTOCOL_GET_NEXT_TOKEN_SPACE)(const GUID **);

/* 331 */
struct _EFI_PCD_PROTOCOL
{
  EFI_PCD_PROTOCOL_SET_SKU SetSku;
  EFI_PCD_PROTOCOL_GET_8 Get8;
  EFI_PCD_PROTOCOL_GET_16 Get16;
  EFI_PCD_PROTOCOL_GET_32 Get32;
  EFI_PCD_PROTOCOL_GET_64 Get64;
  EFI_PCD_PROTOCOL_GET_POINTER GetPtr;
  EFI_PCD_PROTOCOL_GET_BOOLEAN GetBool;
  EFI_PCD_PROTOCOL_GET_SIZE GetSize;
  EFI_PCD_PROTOCOL_SET_8 Set8;
  EFI_PCD_PROTOCOL_SET_16 Set16;
  EFI_PCD_PROTOCOL_SET_32 Set32;
  EFI_PCD_PROTOCOL_SET_64 Set64;
  EFI_PCD_PROTOCOL_SET_POINTER SetPtr;
  EFI_PCD_PROTOCOL_SET_BOOLEAN SetBool;
  EFI_PCD_PROTOCOL_CALLBACK_ON_SET CallbackOnSet;
  EFI_PCD_PROTOCOL_CANCEL_CALLBACK CancelCallback;
  EFI_PCD_PROTOCOL_GET_NEXT_TOKEN GetNextToken;
  EFI_PCD_PROTOCOL_GET_NEXT_TOKEN_SPACE GetNextTokenSpace;
};

/* 332 */
typedef _EFI_PCD_PROTOCOL EFI_PCD_PROTOCOL;

/* 333 */
typedef EFI_STATUS (*PCD_PROTOCOL_GET_NEXT_TOKEN)(const GUID *, UINTN *);

/* 334 */
typedef void (*PCD_PROTOCOL_CALLBACK)(const GUID *, UINTN, void *, UINTN);

/* 335 */
typedef EFI_STATUS (*PCD_PROTOCOL_CANCEL_CALLBACK)(const GUID *, UINTN, PCD_PROTOCOL_CALLBACK);

/* 336 */
typedef EFI_STATUS (*PCD_PROTOCOL_CALLBACK_ONSET)(const GUID *, UINTN, PCD_PROTOCOL_CALLBACK);

/* 337 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_EX_BOOLEAN)(const GUID *, UINTN, BOOLEAN);

/* 338 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_EX_POINTER)(const GUID *, UINTN, UINTN *, void *);

/* 339 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_EX_64)(const GUID *, UINTN, UINT64);

/* 340 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_EX_32)(const GUID *, UINTN, UINT32);

/* 341 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_EX_16)(const GUID *, UINTN, UINT16);

/* 342 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_EX_8)(const GUID *, UINTN, UINT8);

/* 343 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_BOOLEAN)(UINTN, BOOLEAN);

/* 344 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET_POINTER)(UINTN, UINTN *, void *);

/* 345 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET64)(UINTN, UINT64);

/* 346 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET32)(UINTN, UINT32);

/* 347 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET16)(UINTN, UINT16);

/* 348 */
typedef EFI_STATUS (*PCD_PROTOCOL_SET8)(UINTN, UINT8);

/* 349 */
typedef UINTN (*PCD_PROTOCOL_GET_EX_SIZE)(const GUID *, UINTN);

/* 350 */
typedef BOOLEAN (*PCD_PROTOCOL_GET_EX_BOOLEAN)(const GUID *, UINTN);

/* 351 */
typedef void *(*PCD_PROTOCOL_GET_EX_POINTER)(const GUID *, UINTN);

/* 352 */
typedef UINT64 (*PCD_PROTOCOL_GET_EX_64)(const GUID *, UINTN);

/* 353 */
typedef UINT32 (*PCD_PROTOCOL_GET_EX_32)(const GUID *, UINTN);

/* 354 */
typedef UINT16 (*PCD_PROTOCOL_GET_EX_16)(const GUID *, UINTN);

/* 355 */
typedef UINT8 (*PCD_PROTOCOL_GET_EX_8)(const GUID *, UINTN);

/* 356 */
typedef UINTN (*PCD_PROTOCOL_GET_SIZE)(UINTN);

/* 357 */
typedef BOOLEAN (*PCD_PROTOCOL_GET_BOOLEAN)(UINTN);

/* 358 */
typedef void *(*PCD_PROTOCOL_GET_POINTER)(UINTN);

/* 359 */
typedef UINT64 (*PCD_PROTOCOL_GET64)(UINTN);

/* 360 */
typedef UINT32 (*PCD_PROTOCOL_GET32)(UINTN);

/* 361 */
typedef UINT16 (*PCD_PROTOCOL_GET16)(UINTN);

/* 362 */
typedef UINT8 (*PCD_PROTOCOL_GET8)(UINTN);

/* 363 */
typedef void (*PCD_PROTOCOL_SET_SKU)(UINTN);

/* 364 */
typedef EFI_STATUS (*PCD_PROTOCOL_GET_NEXT_TOKENSPACE)(const GUID **);

/* 365 */
struct PCD_PROTOCOL
{
  PCD_PROTOCOL_SET_SKU SetSku;
  PCD_PROTOCOL_GET8 Get8;
  PCD_PROTOCOL_GET16 Get16;
  PCD_PROTOCOL_GET32 Get32;
  PCD_PROTOCOL_GET64 Get64;
  PCD_PROTOCOL_GET_POINTER GetPtr;
  PCD_PROTOCOL_GET_BOOLEAN GetBool;
  PCD_PROTOCOL_GET_SIZE GetSize;
  PCD_PROTOCOL_GET_EX_8 Get8Ex;
  PCD_PROTOCOL_GET_EX_16 Get16Ex;
  PCD_PROTOCOL_GET_EX_32 Get32Ex;
  PCD_PROTOCOL_GET_EX_64 Get64Ex;
  PCD_PROTOCOL_GET_EX_POINTER GetPtrEx;
  PCD_PROTOCOL_GET_EX_BOOLEAN GetBoolEx;
  PCD_PROTOCOL_GET_EX_SIZE GetSizeEx;
  PCD_PROTOCOL_SET8 Set8;
  PCD_PROTOCOL_SET16 Set16;
  PCD_PROTOCOL_SET32 Set32;
  PCD_PROTOCOL_SET64 Set64;
  PCD_PROTOCOL_SET_POINTER SetPtr;
  PCD_PROTOCOL_SET_BOOLEAN SetBool;
  PCD_PROTOCOL_SET_EX_8 Set8Ex;
  PCD_PROTOCOL_SET_EX_16 Set16Ex;
  PCD_PROTOCOL_SET_EX_32 Set32Ex;
  PCD_PROTOCOL_SET_EX_64 Set64Ex;
  PCD_PROTOCOL_SET_EX_POINTER SetPtrEx;
  PCD_PROTOCOL_SET_EX_BOOLEAN SetBoolEx;
  PCD_PROTOCOL_CALLBACK_ONSET CallbackOnSet;
  PCD_PROTOCOL_CANCEL_CALLBACK CancelCallback;
  PCD_PROTOCOL_GET_NEXT_TOKEN GetNextToken;
  PCD_PROTOCOL_GET_NEXT_TOKENSPACE GetNextTokenSpace;
};

/* 367 */
typedef _EFI_GENERIC_MEMORY_TEST_PROTOCOL EFI_GENERIC_MEMORY_TEST_PROTOCOL;

/* 366 */
typedef EFI_STATUS (*EFI_MEMORY_TEST_FINISHED)(EFI_GENERIC_MEMORY_TEST_PROTOCOL *);

/* 369 */
typedef EFI_STATUS (*EFI_MEMORY_TEST_INIT)(EFI_GENERIC_MEMORY_TEST_PROTOCOL *, EXTENDMEM_COVERAGE_LEVEL, BOOLEAN *);

/* 370 */
typedef EFI_STATUS (*EFI_PERFORM_MEMORY_TEST)(EFI_GENERIC_MEMORY_TEST_PROTOCOL *, UINT64 *, UINT64 *, BOOLEAN *, BOOLEAN);

/* 371 */
typedef EFI_STATUS (*EFI_MEMORY_TEST_COMPATIBLE_RANGE)(EFI_GENERIC_MEMORY_TEST_PROTOCOL *, EFI_PHYSICAL_ADDRESS, UINT64);

/* 368 */
struct _EFI_GENERIC_MEMORY_TEST_PROTOCOL
{
  EFI_MEMORY_TEST_INIT MemoryTestInit;
  EFI_PERFORM_MEMORY_TEST PerformMemoryTest;
  EFI_MEMORY_TEST_FINISHED Finished;
  EFI_MEMORY_TEST_COMPATIBLE_RANGE CompatibleRangeTest;
};

/* 372 */
union EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION
{
  EFI_GRAPHICS_OUTPUT_BLT_PIXEL Pixel;
  UINT32 Raw;
};

/* 373 */
struct EFI_LOADED_IMAGE_PROTOCOL
{
  UINT32 Revision;
  EFI_HANDLE ParentHandle;
  EFI_SYSTEM_TABLE *SystemTable;
  EFI_HANDLE DeviceHandle;
  EFI_DEVICE_PATH_PROTOCOL *FilePath;
  void *Reserved;
  UINT32 LoadOptionsSize;
  void *LoadOptions;
  void *ImageBase;
  UINT64 ImageSize;
  EFI_MEMORY_TYPE ImageCodeType;
  EFI_MEMORY_TYPE ImageDataType;
  EFI_IMAGE_UNLOAD Unload;
};

/* 374 */
struct EMU_SYSTEM_CONFIGURATION
{
  UINT32 ConOutColumn;
  UINT32 ConOutRow;
};

/* 375 */
struct __attribute__((packed)) __attribute__((aligned(2))) VARIABLE_LOCK_ON_VAR_STATE_POLICY
{
  EFI_GUID Namespace;
  UINT8 Value;
  UINT8 Padding;
};

/* 377 */
typedef _EFI_COMPONENT_NAME_PROTOCOL EFI_COMPONENT_NAME_PROTOCOL;

/* 376 */
typedef EFI_STATUS (*EFI_COMPONENT_NAME_GET_CONTROLLER_NAME)(EFI_COMPONENT_NAME_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, CHAR8 *, CHAR16 **);

/* 379 */
typedef EFI_STATUS (*EFI_COMPONENT_NAME_GET_DRIVER_NAME)(EFI_COMPONENT_NAME_PROTOCOL *, CHAR8 *, CHAR16 **);

/* 378 */
struct _EFI_COMPONENT_NAME_PROTOCOL
{
  EFI_COMPONENT_NAME_GET_DRIVER_NAME GetDriverName;
  EFI_COMPONENT_NAME_GET_CONTROLLER_NAME GetControllerName;
  CHAR8 *SupportedLanguages;
};

/* 380 */
struct BM_COLLECT_KEY_OPTIONS_PARAM
{
  EFI_BOOT_MANAGER_KEY_OPTION *KeyOptions;
  UINTN KeyOptionCount;
};

/* 381 */
struct EFI_IMAGE_DATA_DIRECTORY
{
  UINT32 VirtualAddress;
  UINT32 Size;
};

/* 382 */
struct EFI_IMAGE_OPTIONAL_HEADER32
{
  UINT16 Magic;
  UINT8 MajorLinkerVersion;
  UINT8 MinorLinkerVersion;
  UINT32 SizeOfCode;
  UINT32 SizeOfInitializedData;
  UINT32 SizeOfUninitializedData;
  UINT32 AddressOfEntryPoint;
  UINT32 BaseOfCode;
  UINT32 BaseOfData;
  UINT32 ImageBase;
  UINT32 SectionAlignment;
  UINT32 FileAlignment;
  UINT16 MajorOperatingSystemVersion;
  UINT16 MinorOperatingSystemVersion;
  UINT16 MajorImageVersion;
  UINT16 MinorImageVersion;
  UINT16 MajorSubsystemVersion;
  UINT16 MinorSubsystemVersion;
  UINT32 Win32VersionValue;
  UINT32 SizeOfImage;
  UINT32 SizeOfHeaders;
  UINT32 CheckSum;
  UINT16 Subsystem;
  UINT16 DllCharacteristics;
  UINT32 SizeOfStackReserve;
  UINT32 SizeOfStackCommit;
  UINT32 SizeOfHeapReserve;
  UINT32 SizeOfHeapCommit;
  UINT32 LoaderFlags;
  UINT32 NumberOfRvaAndSizes;
  EFI_IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 383 */
struct EFI_IMAGE_FILE_HEADER
{
  UINT16 Machine;
  UINT16 NumberOfSections;
  UINT32 TimeDateStamp;
  UINT32 PointerToSymbolTable;
  UINT32 NumberOfSymbols;
  UINT16 SizeOfOptionalHeader;
  UINT16 Characteristics;
};

/* 384 */
struct EFI_IMAGE_OPTIONAL_HEADER64
{
  UINT16 Magic;
  UINT8 MajorLinkerVersion;
  UINT8 MinorLinkerVersion;
  UINT32 SizeOfCode;
  UINT32 SizeOfInitializedData;
  UINT32 SizeOfUninitializedData;
  UINT32 AddressOfEntryPoint;
  UINT32 BaseOfCode;
  UINT64 ImageBase;
  UINT32 SectionAlignment;
  UINT32 FileAlignment;
  UINT16 MajorOperatingSystemVersion;
  UINT16 MinorOperatingSystemVersion;
  UINT16 MajorImageVersion;
  UINT16 MinorImageVersion;
  UINT16 MajorSubsystemVersion;
  UINT16 MinorSubsystemVersion;
  UINT32 Win32VersionValue;
  UINT32 SizeOfImage;
  UINT32 SizeOfHeaders;
  UINT32 CheckSum;
  UINT16 Subsystem;
  UINT16 DllCharacteristics;
  UINT64 SizeOfStackReserve;
  UINT64 SizeOfStackCommit;
  UINT64 SizeOfHeapReserve;
  UINT64 SizeOfHeapCommit;
  UINT32 LoaderFlags;
  UINT32 NumberOfRvaAndSizes;
  EFI_IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 385 */
struct EFI_IMAGE_NT_HEADERS64
{
  UINT32 Signature;
  EFI_IMAGE_FILE_HEADER FileHeader;
  EFI_IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

/* 386 */
struct EFI_IMAGE_NT_HEADERS32
{
  UINT32 Signature;
  EFI_IMAGE_FILE_HEADER FileHeader;
  EFI_IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};

/* 387 */
struct EFI_TE_IMAGE_HEADER
{
  UINT16 Signature;
  UINT16 Machine;
  UINT8 NumberOfSections;
  UINT8 Subsystem;
  UINT16 StrippedSize;
  UINT32 AddressOfEntryPoint;
  UINT32 BaseOfCode;
  UINT64 ImageBase;
  EFI_IMAGE_DATA_DIRECTORY DataDirectory[2];
};

/* 388 */
union EFI_IMAGE_OPTIONAL_HEADER_UNION
{
  EFI_IMAGE_NT_HEADERS32 Pe32;
  EFI_IMAGE_NT_HEADERS64 Pe32Plus;
  EFI_TE_IMAGE_HEADER Te;
};

/* 389 */
struct EFI_IMAGE_DOS_HEADER
{
  UINT16 e_magic;
  UINT16 e_cblp;
  UINT16 e_cp;
  UINT16 e_crlc;
  UINT16 e_cparhdr;
  UINT16 e_minalloc;
  UINT16 e_maxalloc;
  UINT16 e_ss;
  UINT16 e_sp;
  UINT16 e_csum;
  UINT16 e_ip;
  UINT16 e_cs;
  UINT16 e_lfarlc;
  UINT16 e_ovno;
  UINT16 e_res[4];
  UINT16 e_oemid;
  UINT16 e_oeminfo;
  UINT16 e_res2[10];
  UINT32 e_lfanew;
};

/* 390 */
struct BM_COLLECT_LOAD_OPTIONS_PARAM
{
  EFI_BOOT_MANAGER_LOAD_OPTION_TYPE OptionType;
  EFI_GUID *Guid;
  EFI_BOOT_MANAGER_LOAD_OPTION *Options;
  UINTN OptionCount;
};

/* 393 */
typedef _EDKII_VARIABLE_LOCK_PROTOCOL EDKII_VARIABLE_LOCK_PROTOCOL;

/* 392 */
typedef EFI_STATUS (*EDKII_VARIABLE_LOCK_PROTOCOL_REQUEST_TO_LOCK)(const EDKII_VARIABLE_LOCK_PROTOCOL *, CHAR16 *, EFI_GUID *);

/* 391 */
struct _EDKII_VARIABLE_LOCK_PROTOCOL
{
  EDKII_VARIABLE_LOCK_PROTOCOL_REQUEST_TO_LOCK RequestToLock;
};

/* 394 */
struct BM_BOOT_DESCRIPTION_ENTRY
{
  UINT32 Signature;
  LIST_ENTRY Link;
  EFI_BOOT_MANAGER_BOOT_DESCRIPTION_HANDLER Handler;
};

/* 395 */
struct EFI_FILE_IO_TOKEN
{
  EFI_EVENT Event;
  EFI_STATUS Status;
  UINTN BufferSize;
  void *Buffer;
};

/* 397 */
typedef _EFI_FILE_PROTOCOL EFI_FILE_PROTOCOL;

/* 396 */
typedef EFI_STATUS (*EFI_FILE_WRITE_EX)(EFI_FILE_PROTOCOL *, EFI_FILE_IO_TOKEN *);

/* 399 */
typedef EFI_STATUS (*EFI_FILE_OPEN)(EFI_FILE_PROTOCOL *, EFI_FILE_PROTOCOL **, CHAR16 *, UINT64, UINT64);

/* 400 */
typedef EFI_STATUS (*EFI_FILE_CLOSE)(EFI_FILE_PROTOCOL *);

/* 401 */
typedef EFI_STATUS (*EFI_FILE_DELETE)(EFI_FILE_PROTOCOL *);

/* 402 */
typedef EFI_STATUS (*EFI_FILE_READ)(EFI_FILE_PROTOCOL *, UINTN *, void *);

/* 403 */
typedef EFI_STATUS (*EFI_FILE_WRITE)(EFI_FILE_PROTOCOL *, UINTN *, void *);

/* 404 */
typedef EFI_STATUS (*EFI_FILE_GET_POSITION)(EFI_FILE_PROTOCOL *, UINT64 *);

/* 405 */
typedef EFI_STATUS (*EFI_FILE_SET_POSITION)(EFI_FILE_PROTOCOL *, UINT64);

/* 406 */
typedef EFI_STATUS (*EFI_FILE_GET_INFO)(EFI_FILE_PROTOCOL *, EFI_GUID *, UINTN *, void *);

/* 407 */
typedef EFI_STATUS (*EFI_FILE_SET_INFO)(EFI_FILE_PROTOCOL *, EFI_GUID *, UINTN, void *);

/* 408 */
typedef EFI_STATUS (*EFI_FILE_FLUSH)(EFI_FILE_PROTOCOL *);

/* 409 */
typedef EFI_STATUS (*EFI_FILE_OPEN_EX)(EFI_FILE_PROTOCOL *, EFI_FILE_PROTOCOL **, CHAR16 *, UINT64, UINT64, EFI_FILE_IO_TOKEN *);

/* 410 */
typedef EFI_STATUS (*EFI_FILE_READ_EX)(EFI_FILE_PROTOCOL *, EFI_FILE_IO_TOKEN *);

/* 411 */
typedef EFI_STATUS (*EFI_FILE_FLUSH_EX)(EFI_FILE_PROTOCOL *, EFI_FILE_IO_TOKEN *);

/* 398 */
struct _EFI_FILE_PROTOCOL
{
  UINT64 Revision;
  EFI_FILE_OPEN Open;
  EFI_FILE_CLOSE Close;
  EFI_FILE_DELETE Delete;
  EFI_FILE_READ Read;
  EFI_FILE_WRITE Write;
  EFI_FILE_GET_POSITION GetPosition;
  EFI_FILE_SET_POSITION SetPosition;
  EFI_FILE_GET_INFO GetInfo;
  EFI_FILE_SET_INFO SetInfo;
  EFI_FILE_FLUSH Flush;
  EFI_FILE_OPEN_EX OpenEx;
  EFI_FILE_READ_EX ReadEx;
  EFI_FILE_WRITE_EX WriteEx;
  EFI_FILE_FLUSH_EX FlushEx;
};

/* 414 */
typedef _EFI_SIMPLE_FILE_SYSTEM_PROTOCOL EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;

/* 413 */
typedef EFI_STATUS (*EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME)(EFI_SIMPLE_FILE_SYSTEM_PROTOCOL *, EFI_FILE_PROTOCOL **);

/* 412 */
struct _EFI_SIMPLE_FILE_SYSTEM_PROTOCOL
{
  UINT64 Revision;
  EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME OpenVolume;
};

/* 415 */
typedef UINT64 EFI_LBA;

/* 416 */
struct EFI_BLOCK_IO_MEDIA
{
  UINT32 MediaId;
  BOOLEAN RemovableMedia;
  BOOLEAN MediaPresent;
  BOOLEAN LogicalPartition;
  BOOLEAN ReadOnly;
  BOOLEAN WriteCaching;
  UINT32 BlockSize;
  UINT32 IoAlign;
  EFI_LBA LastBlock;
  EFI_LBA LowestAlignedLba;
  UINT32 LogicalBlocksPerPhysicalBlock;
  UINT32 OptimalTransferLengthGranularity;
};

/* 418 */
typedef _EFI_BLOCK_IO_PROTOCOL EFI_BLOCK_IO_PROTOCOL;

/* 417 */
typedef EFI_STATUS (*EFI_BLOCK_WRITE)(EFI_BLOCK_IO_PROTOCOL *, UINT32, EFI_LBA, UINTN, void *);

/* 420 */
typedef EFI_STATUS (*EFI_BLOCK_RESET)(EFI_BLOCK_IO_PROTOCOL *, BOOLEAN);

/* 421 */
typedef EFI_STATUS (*EFI_BLOCK_READ)(EFI_BLOCK_IO_PROTOCOL *, UINT32, EFI_LBA, UINTN, void *);

/* 422 */
typedef EFI_STATUS (*EFI_BLOCK_FLUSH)(EFI_BLOCK_IO_PROTOCOL *);

/* 419 */
struct _EFI_BLOCK_IO_PROTOCOL
{
  UINT64 Revision;
  EFI_BLOCK_IO_MEDIA *Media;
  EFI_BLOCK_RESET Reset;
  EFI_BLOCK_READ ReadBlocks;
  EFI_BLOCK_WRITE WriteBlocks;
  EFI_BLOCK_FLUSH FlushBlocks;
};

/* 423 */
struct NVME_PSDESCRIPTOR
{
  UINT16 Mp;
  UINT8 Rsvd1;
  unsigned __int8 Mps : 1;
  unsigned __int8 Nops : 1;
  unsigned __int8 Rsvd2 : 6;
  UINT32 Enlat;
  UINT32 Exlat;
  unsigned __int8 Rrt : 5;
  unsigned __int8 Rsvd3 : 3;
  unsigned __int8 Rrl : 5;
  unsigned __int8 Rsvd4 : 3;
  unsigned __int8 Rwt : 5;
  unsigned __int8 Rsvd5 : 3;
  unsigned __int8 Rwl : 5;
  unsigned __int8 Rsvd6 : 3;
  UINT8 Rsvd7[16];
};

/* 424 */
struct NVME_ADMIN_CONTROLLER_DATA
{
  UINT16 Vid;
  UINT16 Ssvid;
  UINT8 Sn[20];
  UINT8 Mn[40];
  UINT8 Fr[8];
  UINT8 Rab;
  UINT8 Ieee_oui[3];
  UINT8 Cmic;
  UINT8 Mdts;
  UINT8 Cntlid[2];
  UINT8 Rsvd1[176];
  UINT16 Oacs;
  UINT8 Acl;
  UINT8 Aerl;
  UINT8 Frmw;
  UINT8 Lpa;
  UINT8 Elpe;
  UINT8 Npss;
  UINT8 Avscc;
  UINT8 Apsta;
  UINT16 Wctemp;
  UINT16 Cctemp;
  UINT16 Mtfa;
  UINT32 Hmpre;
  UINT32 Hmmin;
  UINT8 Tnvmcap[16];
  UINT8 Rsvd2[216];
  UINT8 Sqes;
  UINT8 Cqes;
  UINT16 Rsvd3;
  UINT32 Nn;
  UINT16 Oncs;
  UINT16 Fuses;
  UINT8 Fna;
  UINT8 Vwc;
  UINT16 Awun;
  UINT16 Awupf;
  UINT8 Nvscc;
  UINT8 Rsvd4;
  UINT16 Acwu;
  UINT16 Rsvd5;
  UINT32 Sgls;
  UINT8 Rsvd6[164];
  UINT8 Rsvd7[1344];
  NVME_PSDESCRIPTOR PsDescriptor[32];
  UINT8 VendorData[1024];
};

/* 425 */
struct EFI_NVM_EXPRESS_COMPLETION
{
  UINT32 DW0;
  UINT32 DW1;
  UINT32 DW2;
  UINT32 DW3;
};

/* 426 */
struct NVME_CDW0
{
  unsigned __int32 Opcode : 8;
  unsigned __int32 FusedOperation : 2;
  unsigned __int32 Reserved : 22;
};

/* 427 */
struct EFI_NVM_EXPRESS_COMMAND
{
  NVME_CDW0 Cdw0;
  UINT8 Flags;
  UINT32 Nsid;
  UINT32 Cdw2;
  UINT32 Cdw3;
  UINT32 Cdw10;
  UINT32 Cdw11;
  UINT32 Cdw12;
  UINT32 Cdw13;
  UINT32 Cdw14;
  UINT32 Cdw15;
};

/* 428 */
struct EFI_NVM_EXPRESS_PASS_THRU_COMMAND_PACKET
{
  UINT64 CommandTimeout;
  void *TransferBuffer;
  UINT32 TransferLength;
  void *MetadataBuffer;
  UINT32 MetadataLength;
  UINT8 QueueType;
  EFI_NVM_EXPRESS_COMMAND *NvmeCmd;
  EFI_NVM_EXPRESS_COMPLETION *NvmeCompletion;
};

/* 429 */
struct __attribute__((packed)) __attribute__((aligned(1))) BBS_BBS_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 DeviceType;
  UINT16 StatusFlag;
  CHAR8 String[1];
};

/* 430 */
struct __attribute__((packed)) __attribute__((aligned(2))) MEDIA_RAM_DISK_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 StartingAddr[2];
  UINT32 EndingAddr[2];
  EFI_GUID TypeGuid;
  UINT16 Instance;
};

/* 431 */
struct MEDIA_RELATIVE_OFFSET_RANGE_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 Reserved;
  UINT64 StartingOffset;
  UINT64 EndingOffset;
};

/* 432 */
struct MEDIA_FW_VOL_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID FvName;
};

/* 433 */
struct MEDIA_PROTOCOL_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID Protocol;
};

/* 434 */
struct FILEPATH_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  CHAR16 PathName[1];
};

/* 435 */
struct CDROM_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 BootEntry;
  UINT64 PartitionStart;
  UINT64 PartitionSize;
};

/* 436 */
struct EMMC_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 SlotNumber;
};

/* 437 */
typedef EMMC_DEVICE_PATH SD_DEVICE_PATH;

/* 438 */
struct UFS_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 Pun;
  UINT8 Lun;
};

/* 439 */
struct WIFI_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 SSId[32];
};

/* 440 */
struct BLUETOOTH_ADDRESS
{
  UINT8 Address[6];
};

/* 441 */
struct BLUETOOTH_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  BLUETOOTH_ADDRESS BD_ADDR;
};

/* 442 */
struct URI_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  CHAR8 Uri[];
};

/* 443 */
typedef IPv4_ADDRESS EFI_IPv4_ADDRESS;

/* 444 */
typedef IPv6_ADDRESS EFI_IPv6_ADDRESS;

/* 445 */
union EFI_IP_ADDRESS
{
  UINT32 Addr[4];
  EFI_IPv4_ADDRESS v4;
  EFI_IPv6_ADDRESS v6;
};

/* 446 */
struct __attribute__((packed)) __attribute__((aligned(1))) DNS_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 IsIPv6;
  EFI_IP_ADDRESS DnsServerIp[];
};

/* 447 */
struct NVME_NAMESPACE_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 NamespaceId;
  UINT64 NamespaceUuid;
};

/* 448 */
struct SASEX_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 SasAddress[8];
  UINT8 Lun[8];
  UINT16 DeviceTopology;
  UINT16 RelativeTargetPort;
};

/* 449 */
struct __attribute__((packed)) __attribute__((aligned(4))) SAS_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID Guid;
  UINT32 Reserved;
  UINT64 SasAddress;
  UINT64 Lun;
  UINT16 DeviceTopology;
  UINT16 RelativeTargetPort;
};

/* 450 */
struct UART_FLOW_CONTROL_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID Guid;
  UINT32 FlowControlMap;
};

/* 451 */
struct __attribute__((packed)) __attribute__((aligned(1))) UART_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 Reserved;
  UINT64 BaudRate;
  UINT8 DataBits;
  UINT8 Parity;
  UINT8 StopBits;
};

/* 452 */
struct INFINIBAND_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 ResourceFlags;
  UINT8 PortGid[16];
  UINT64 ServiceId;
  UINT64 TargetPortId;
  UINT64 DeviceId;
};

/* 453 */
struct VLAN_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 VlanId;
};

/* 454 */
struct IPv6_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_IPv6_ADDRESS LocalIpAddress;
  EFI_IPv6_ADDRESS RemoteIpAddress;
  UINT16 LocalPort;
  UINT16 RemotePort;
  UINT16 Protocol;
  UINT8 IpAddressOrigin;
  UINT8 PrefixLength;
  EFI_IPv6_ADDRESS GatewayIpAddress;
};

/* 455 */
struct __attribute__((packed)) __attribute__((aligned(1))) IPv4_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_IPv4_ADDRESS LocalIpAddress;
  EFI_IPv4_ADDRESS RemoteIpAddress;
  UINT16 LocalPort;
  UINT16 RemotePort;
  UINT16 Protocol;
  BOOLEAN StaticIpAddress;
  EFI_IPv4_ADDRESS GatewayIpAddress;
  EFI_IPv4_ADDRESS SubnetMask;
};

/* 456 */
struct EFI_MAC_ADDRESS
{
  UINT8 Addr[32];
};

/* 457 */
struct MAC_ADDR_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_MAC_ADDRESS MacAddress;
  UINT8 IfType;
};

/* 458 */
struct I2O_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 Tid;
};

/* 459 */
struct DEVICE_LOGICAL_UNIT_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 Lun;
};

/* 460 */
struct USB_WWID_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 InterfaceNumber;
  UINT16 VendorId;
  UINT16 ProductId;
};

/* 461 */
struct __attribute__((packed)) __attribute__((aligned(1))) USB_CLASS_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 VendorId;
  UINT16 ProductId;
  UINT8 DeviceClass;
  UINT8 DeviceSubClass;
  UINT8 DeviceProtocol;
};

/* 462 */
struct SATA_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 HBAPortNumber;
  UINT16 PortMultiplierPortNumber;
  UINT16 Lun;
};

/* 463 */
struct USB_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 ParentPortNumber;
  UINT8 InterfaceNumber;
};

/* 464 */
struct F1394_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 Reserved;
  UINT64 Guid;
};

/* 465 */
struct FIBRECHANNELEX_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 Reserved;
  UINT8 WWN[8];
  UINT8 Lun[8];
};

/* 466 */
struct FIBRECHANNEL_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 Reserved;
  UINT64 WWN;
  UINT64 Lun;
};

/* 467 */
struct __attribute__((packed)) __attribute__((aligned(2))) ISCSI_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 NetworkProtocol;
  UINT16 LoginOption;
  UINT64 Lun;
  UINT16 TargetPortalGroupTag;
};

/* 468 */
struct SCSI_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 Pun;
  UINT16 Lun;
};

/* 469 */
struct ATAPI_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 PrimarySecondary;
  UINT8 SlaveMaster;
  UINT16 Lun;
};

/* 470 */
struct ACPI_ADR_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 ADR;
};

/* 471 */
struct ACPI_EXTENDED_HID_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 HID;
  UINT32 UID;
  UINT32 CID;
};

/* 472 */
struct ACPI_HID_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 HID;
  UINT32 UID;
};

/* 473 */
struct BMC_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 InterfaceType;
  UINT8 BaseAddress[8];
};

/* 474 */
struct CONTROLLER_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 ControllerNumber;
};

/* 475 */
struct MEMMAP_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT32 MemoryType;
  EFI_PHYSICAL_ADDRESS StartingAddress;
  EFI_PHYSICAL_ADDRESS EndingAddress;
};

/* 476 */
struct PCCARD_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 FunctionNumber;
};

/* 477 */
struct PCI_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT8 Function;
  UINT8 Device;
};

/* 478 */
union EFI_DEV_PATH_PTR
{
  EFI_DEVICE_PATH_PROTOCOL *DevPath;
  PCI_DEVICE_PATH *Pci;
  PCCARD_DEVICE_PATH *PcCard;
  MEMMAP_DEVICE_PATH *MemMap;
  VENDOR_DEVICE_PATH *Vendor;
  CONTROLLER_DEVICE_PATH *Controller;
  BMC_DEVICE_PATH *Bmc;
  ACPI_HID_DEVICE_PATH *Acpi;
  ACPI_EXTENDED_HID_DEVICE_PATH *ExtendedAcpi;
  ACPI_ADR_DEVICE_PATH *AcpiAdr;
  ATAPI_DEVICE_PATH *Atapi;
  SCSI_DEVICE_PATH *Scsi;
  ISCSI_DEVICE_PATH *Iscsi;
  FIBRECHANNEL_DEVICE_PATH *FibreChannel;
  FIBRECHANNELEX_DEVICE_PATH *FibreChannelEx;
  F1394_DEVICE_PATH *F1394;
  USB_DEVICE_PATH *Usb;
  SATA_DEVICE_PATH *Sata;
  USB_CLASS_DEVICE_PATH *UsbClass;
  USB_WWID_DEVICE_PATH *UsbWwid;
  DEVICE_LOGICAL_UNIT_DEVICE_PATH *LogicUnit;
  I2O_DEVICE_PATH *I2O;
  MAC_ADDR_DEVICE_PATH *MacAddr;
  IPv4_DEVICE_PATH *Ipv4;
  IPv6_DEVICE_PATH *Ipv6;
  VLAN_DEVICE_PATH *Vlan;
  INFINIBAND_DEVICE_PATH *InfiniBand;
  UART_DEVICE_PATH *Uart;
  UART_FLOW_CONTROL_DEVICE_PATH *UartFlowControl;
  SAS_DEVICE_PATH *Sas;
  SASEX_DEVICE_PATH *SasEx;
  NVME_NAMESPACE_DEVICE_PATH *NvmeNamespace;
  DNS_DEVICE_PATH *Dns;
  URI_DEVICE_PATH *Uri;
  BLUETOOTH_DEVICE_PATH *Bluetooth;
  WIFI_DEVICE_PATH *WiFi;
  UFS_DEVICE_PATH *Ufs;
  SD_DEVICE_PATH *Sd;
  EMMC_DEVICE_PATH *Emmc;
  HARDDRIVE_DEVICE_PATH *HardDrive;
  CDROM_DEVICE_PATH *CD;
  FILEPATH_DEVICE_PATH *FilePath;
  MEDIA_PROTOCOL_DEVICE_PATH *MediaProtocol;
  MEDIA_FW_VOL_DEVICE_PATH *FirmwareVolume;
  MEDIA_FW_VOL_FILEPATH_DEVICE_PATH *FirmwareFile;
  MEDIA_RELATIVE_OFFSET_RANGE_DEVICE_PATH *Offset;
  MEDIA_RAM_DISK_DEVICE_PATH *RamDisk;
  BBS_BBS_DEVICE_PATH *Bbs;
  UINT8 *Raw;
};

/* 479 */
struct EFI_NVM_EXPRESS_PASS_THRU_MODE
{
  UINT32 Attributes;
  UINT32 IoAlign;
  UINT32 NvmeVersion;
};

/* 481 */
typedef _EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL;

/* 480 */
typedef EFI_STATUS (*EFI_NVM_EXPRESS_PASS_THRU_BUILD_DEVICE_PATH)(EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL *, UINT32, EFI_DEVICE_PATH_PROTOCOL **);

/* 483 */
typedef EFI_STATUS (*EFI_NVM_EXPRESS_PASS_THRU_PASSTHRU)(EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL *, UINT32, EFI_NVM_EXPRESS_PASS_THRU_COMMAND_PACKET *, EFI_EVENT);

/* 484 */
typedef EFI_STATUS (*EFI_NVM_EXPRESS_PASS_THRU_GET_NEXT_NAMESPACE)(EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL *, UINT32 *);

/* 485 */
typedef EFI_STATUS (*EFI_NVM_EXPRESS_PASS_THRU_GET_NAMESPACE)(EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL *, EFI_DEVICE_PATH_PROTOCOL *, UINT32 *);

/* 482 */
struct _EFI_NVM_EXPRESS_PASS_THRU_PROTOCOL
{
  EFI_NVM_EXPRESS_PASS_THRU_MODE *Mode;
  EFI_NVM_EXPRESS_PASS_THRU_PASSTHRU PassThru;
  EFI_NVM_EXPRESS_PASS_THRU_GET_NEXT_NAMESPACE GetNextNamespace;
  EFI_NVM_EXPRESS_PASS_THRU_BUILD_DEVICE_PATH BuildDevicePath;
  EFI_NVM_EXPRESS_PASS_THRU_GET_NAMESPACE GetNamespace;
};

/* 488 */
typedef _EFI_LOAD_FILE_PROTOCOL EFI_LOAD_FILE_PROTOCOL;

/* 487 */
typedef EFI_STATUS (*EFI_LOAD_FILE)(EFI_LOAD_FILE_PROTOCOL *, EFI_DEVICE_PATH_PROTOCOL *, BOOLEAN, UINTN *, void *);

/* 486 */
struct _EFI_LOAD_FILE_PROTOCOL
{
  EFI_LOAD_FILE LoadFile;
};

/* 489 */
struct USB_DEVICE_DESCRIPTOR
{
  UINT8 Length;
  UINT8 DescriptorType;
  UINT16 BcdUSB;
  UINT8 DeviceClass;
  UINT8 DeviceSubClass;
  UINT8 DeviceProtocol;
  UINT8 MaxPacketSize0;
  UINT16 IdVendor;
  UINT16 IdProduct;
  UINT16 BcdDevice;
  UINT8 StrManufacturer;
  UINT8 StrProduct;
  UINT8 StrSerialNumber;
  UINT8 NumConfigurations;
};

/* 490 */
typedef USB_DEVICE_DESCRIPTOR EFI_USB_DEVICE_DESCRIPTOR;

/* 491 */
struct __attribute__((packed)) __attribute__((aligned(1))) USB_ENDPOINT_DESCRIPTOR
{
  UINT8 Length;
  UINT8 DescriptorType;
  UINT8 EndpointAddress;
  UINT8 Attributes;
  UINT16 MaxPacketSize;
  UINT8 Interval;
};

/* 492 */
typedef USB_ENDPOINT_DESCRIPTOR EFI_USB_ENDPOINT_DESCRIPTOR;

/* 493 */
struct USB_INTERFACE_DESCRIPTOR
{
  UINT8 Length;
  UINT8 DescriptorType;
  UINT8 InterfaceNumber;
  UINT8 AlternateSetting;
  UINT8 NumEndpoints;
  UINT8 InterfaceClass;
  UINT8 InterfaceSubClass;
  UINT8 InterfaceProtocol;
  UINT8 Interface;
};

/* 494 */
typedef USB_INTERFACE_DESCRIPTOR EFI_USB_INTERFACE_DESCRIPTOR;

/* 495 */
struct __attribute__((packed)) __attribute__((aligned(1))) USB_CONFIG_DESCRIPTOR
{
  UINT8 Length;
  UINT8 DescriptorType;
  UINT16 TotalLength;
  UINT8 NumInterfaces;
  UINT8 ConfigurationValue;
  UINT8 Configuration;
  UINT8 Attributes;
  UINT8 MaxPower;
};

/* 496 */
typedef USB_CONFIG_DESCRIPTOR EFI_USB_CONFIG_DESCRIPTOR;

/* 497 */
typedef EFI_STATUS (*EFI_ASYNC_USB_TRANSFER_CALLBACK)(void *, UINTN, void *, UINT32);

/* 498 */
enum EFI_USB_DATA_DIRECTION : __int32
{
  EfiUsbDataIn = 0x0,
  EfiUsbDataOut = 0x1,
  EfiUsbNoData = 0x2,
};

/* 499 */
struct USB_DEVICE_REQUEST
{
  UINT8 RequestType;
  UINT8 Request;
  UINT16 Value;
  UINT16 Index;
  UINT16 Length;
};

/* 500 */
typedef USB_DEVICE_REQUEST EFI_USB_DEVICE_REQUEST;

/* 502 */
typedef _EFI_USB_IO_PROTOCOL EFI_USB_IO_PROTOCOL;

/* 501 */
typedef EFI_STATUS (*EFI_USB_IO_GET_SUPPORTED_LANGUAGE)(EFI_USB_IO_PROTOCOL *, UINT16 **, UINT16 *);

/* 504 */
typedef EFI_STATUS (*EFI_USB_IO_CONTROL_TRANSFER)(EFI_USB_IO_PROTOCOL *, EFI_USB_DEVICE_REQUEST *, EFI_USB_DATA_DIRECTION, UINT32, void *, UINTN, UINT32 *);

/* 505 */
typedef EFI_STATUS (*EFI_USB_IO_BULK_TRANSFER)(EFI_USB_IO_PROTOCOL *, UINT8, void *, UINTN *, UINTN, UINT32 *);

/* 506 */
typedef EFI_STATUS (*EFI_USB_IO_ASYNC_INTERRUPT_TRANSFER)(EFI_USB_IO_PROTOCOL *, UINT8, BOOLEAN, UINTN, UINTN, EFI_ASYNC_USB_TRANSFER_CALLBACK, void *);

/* 507 */
typedef EFI_STATUS (*EFI_USB_IO_SYNC_INTERRUPT_TRANSFER)(EFI_USB_IO_PROTOCOL *, UINT8, void *, UINTN *, UINTN, UINT32 *);

/* 508 */
typedef EFI_STATUS (*EFI_USB_IO_ISOCHRONOUS_TRANSFER)(EFI_USB_IO_PROTOCOL *, UINT8, void *, UINTN, UINT32 *);

/* 509 */
typedef EFI_STATUS (*EFI_USB_IO_ASYNC_ISOCHRONOUS_TRANSFER)(EFI_USB_IO_PROTOCOL *, UINT8, void *, UINTN, EFI_ASYNC_USB_TRANSFER_CALLBACK, void *);

/* 510 */
typedef EFI_STATUS (*EFI_USB_IO_GET_DEVICE_DESCRIPTOR)(EFI_USB_IO_PROTOCOL *, EFI_USB_DEVICE_DESCRIPTOR *);

/* 511 */
typedef EFI_STATUS (*EFI_USB_IO_GET_CONFIG_DESCRIPTOR)(EFI_USB_IO_PROTOCOL *, EFI_USB_CONFIG_DESCRIPTOR *);

/* 512 */
typedef EFI_STATUS (*EFI_USB_IO_GET_INTERFACE_DESCRIPTOR)(EFI_USB_IO_PROTOCOL *, EFI_USB_INTERFACE_DESCRIPTOR *);

/* 513 */
typedef EFI_STATUS (*EFI_USB_IO_GET_ENDPOINT_DESCRIPTOR)(EFI_USB_IO_PROTOCOL *, UINT8, EFI_USB_ENDPOINT_DESCRIPTOR *);

/* 514 */
typedef EFI_STATUS (*EFI_USB_IO_GET_STRING_DESCRIPTOR)(EFI_USB_IO_PROTOCOL *, UINT16, UINT8, CHAR16 **);

/* 515 */
typedef EFI_STATUS (*EFI_USB_IO_PORT_RESET)(EFI_USB_IO_PROTOCOL *);

/* 503 */
struct _EFI_USB_IO_PROTOCOL
{
  EFI_USB_IO_CONTROL_TRANSFER UsbControlTransfer;
  EFI_USB_IO_BULK_TRANSFER UsbBulkTransfer;
  EFI_USB_IO_ASYNC_INTERRUPT_TRANSFER UsbAsyncInterruptTransfer;
  EFI_USB_IO_SYNC_INTERRUPT_TRANSFER UsbSyncInterruptTransfer;
  EFI_USB_IO_ISOCHRONOUS_TRANSFER UsbIsochronousTransfer;
  EFI_USB_IO_ASYNC_ISOCHRONOUS_TRANSFER UsbAsyncIsochronousTransfer;
  EFI_USB_IO_GET_DEVICE_DESCRIPTOR UsbGetDeviceDescriptor;
  EFI_USB_IO_GET_CONFIG_DESCRIPTOR UsbGetConfigDescriptor;
  EFI_USB_IO_GET_INTERFACE_DESCRIPTOR UsbGetInterfaceDescriptor;
  EFI_USB_IO_GET_ENDPOINT_DESCRIPTOR UsbGetEndpointDescriptor;
  EFI_USB_IO_GET_STRING_DESCRIPTOR UsbGetStringDescriptor;
  EFI_USB_IO_GET_SUPPORTED_LANGUAGE UsbGetSupportedLanguages;
  EFI_USB_IO_PORT_RESET UsbPortReset;
};

/* 516 */
struct EFI_SCSI_INQUIRY_DATA
{
  unsigned __int8 Peripheral_Type : 5;
  unsigned __int8 Peripheral_Qualifier : 3;
  unsigned __int8 DeviceType_Modifier : 7;
  unsigned __int8 Rmb : 1;
  UINT8 Version;
  UINT8 Response_Data_Format;
  UINT8 Addnl_Length;
  UINT8 Reserved_5_95[91];
};

/* 517 */
struct ATAPI_IDENTIFY_DATA
{
  UINT16 config;
  UINT16 reserved_1;
  UINT16 specific_config;
  UINT16 reserved_3_9[7];
  CHAR8 SerialNo[20];
  UINT16 reserved_20_22[3];
  CHAR8 FirmwareVer[8];
  CHAR8 ModelName[40];
  UINT16 reserved_47_48[2];
  UINT16 capabilities_49;
  UINT16 capabilities_50;
  UINT16 obsolete_51;
  UINT16 reserved_52;
  UINT16 field_validity;
  UINT16 reserved_54_61[8];
  UINT16 dma_dir;
  UINT16 multi_word_dma_mode;
  UINT16 advanced_pio_modes;
  UINT16 min_multi_word_dma_cycle_time;
  UINT16 rec_multi_word_dma_cycle_time;
  UINT16 min_pio_cycle_time_without_flow_control;
  UINT16 min_pio_cycle_time_with_flow_control;
  UINT16 reserved_69_70[2];
  UINT16 obsolete_71_72[2];
  UINT16 reserved_73_74[2];
  UINT16 obsolete_75;
  UINT16 serial_ata_capabilities;
  UINT16 reserved_77;
  UINT16 serial_ata_features_supported;
  UINT16 serial_ata_features_enabled;
  UINT16 major_version_no;
  UINT16 minor_version_no;
  UINT16 cmd_set_support_82;
  UINT16 cmd_set_support_83;
  UINT16 cmd_feature_support;
  UINT16 cmd_feature_enable_85;
  UINT16 cmd_feature_enable_86;
  UINT16 cmd_feature_default;
  UINT16 ultra_dma_select;
  UINT16 time_required_for_sec_erase;
  UINT16 time_required_for_enhanced_sec_erase;
  UINT16 advanced_power_management_level;
  UINT16 master_pwd_revison_code;
  UINT16 hardware_reset_result;
  UINT16 obsolete_94;
  UINT16 reserved_95_107[13];
  UINT16 world_wide_name[4];
  UINT16 reserved_for_128bit_wwn_112_115[4];
  UINT16 reserved_116_118[3];
  UINT16 command_and_feature_sets_supported;
  UINT16 command_and_feature_sets_supported_enabled;
  UINT16 reserved_121_124[4];
  UINT16 atapi_byte_count_0_behavior;
  UINT16 obsolete_126_127[2];
  UINT16 security_status;
  UINT16 reserved_129_159[31];
  UINT16 cfa_reserved_160_175[16];
  UINT16 reserved_176_221[46];
  UINT16 transport_major_version;
  UINT16 transport_minor_version;
  UINT16 reserved_224_254[31];
  UINT16 integrity_word;
};

/* 518 */
typedef ATAPI_IDENTIFY_DATA EFI_ATAPI_IDENTIFY_DATA;

/* 520 */
typedef _EFI_DISK_INFO_PROTOCOL EFI_DISK_INFO_PROTOCOL;

/* 519 */
typedef EFI_STATUS (*EFI_DISK_INFO_SENSE_DATA)(EFI_DISK_INFO_PROTOCOL *, void *, UINT32 *, UINT8 *);

/* 522 */
typedef EFI_STATUS (*EFI_DISK_INFO_INQUIRY)(EFI_DISK_INFO_PROTOCOL *, void *, UINT32 *);

/* 523 */
typedef EFI_STATUS (*EFI_DISK_INFO_IDENTIFY)(EFI_DISK_INFO_PROTOCOL *, void *, UINT32 *);

/* 524 */
typedef EFI_STATUS (*EFI_DISK_INFO_WHICH_IDE)(EFI_DISK_INFO_PROTOCOL *, UINT32 *, UINT32 *);

/* 521 */
struct _EFI_DISK_INFO_PROTOCOL
{
  EFI_GUID Interface;
  EFI_DISK_INFO_INQUIRY Inquiry;
  EFI_DISK_INFO_IDENTIFY Identify;
  EFI_DISK_INFO_SENSE_DATA SenseData;
  EFI_DISK_INFO_WHICH_IDE WhichIde;
};

/* 525 */
typedef EFI_STATUS (*PLATFORM_BOOT_MANAGER_REFRESH_ALL_BOOT_OPTIONS)(const EFI_BOOT_MANAGER_LOAD_OPTION *, UINTN, EFI_BOOT_MANAGER_LOAD_OPTION **, UINTN *);

/* 526 */
struct _EDKII_PLATFORM_BOOT_MANAGER_PROTOCOL
{
  UINT64 Revision;
  PLATFORM_BOOT_MANAGER_REFRESH_ALL_BOOT_OPTIONS RefreshAllBootOptions;
};

/* 527 */
typedef _EDKII_PLATFORM_BOOT_MANAGER_PROTOCOL EDKII_PLATFORM_BOOT_MANAGER_PROTOCOL;

/* 530 */
typedef _EFI_BOOT_LOGO_PROTOCOL EFI_BOOT_LOGO_PROTOCOL;

/* 529 */
typedef EFI_STATUS (*EFI_SET_BOOT_LOGO)(EFI_BOOT_LOGO_PROTOCOL *, EFI_GRAPHICS_OUTPUT_BLT_PIXEL *, UINTN, UINTN, UINTN, UINTN);

/* 528 */
struct _EFI_BOOT_LOGO_PROTOCOL
{
  EFI_SET_BOOT_LOGO SetBootLogo;
};

/* 531 */
struct EFI_RETURN_STATUS_EXTENDED_DATA
{
  EFI_STATUS_CODE_DATA DataHeader;
  EFI_STATUS ReturnStatus;
};

/* 532 */
struct HII_LIB_OPCODE_BUFFER
{
  UINT8 *Buffer;
  UINTN BufferSize;
  UINTN Position;
};

/* 533 */
typedef UINT16 EFI_VARSTORE_ID;

/* 534 */
typedef UINT16 EFI_QUESTION_ID;

/* 535 */
struct __attribute__((aligned(4))) IFR_BLOCK_DATA
{
  LIST_ENTRY Entry;
  UINT16 Offset;
  UINT16 Width;
  UINT8 OpCode;
  UINT8 Scope;
};

/* 536 */
struct _EFI_IFR_OP_HEADER
{
  UINT8 OpCode;
  unsigned __int8 Length : 7;
  unsigned __int8 Scope : 1;
};

/* 537 */
typedef _EFI_IFR_OP_HEADER EFI_IFR_OP_HEADER;

/* 538 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_FORM_SET
{
  EFI_IFR_OP_HEADER Header;
  EFI_GUID Guid;
  EFI_STRING_ID FormSetTitle;
  EFI_STRING_ID Help;
  UINT8 Flags;
};

/* 539 */
typedef _EFI_IFR_FORM_SET EFI_IFR_FORM_SET;

/* 540 */
typedef UINT8 EFI_FV_FILETYPE;

/* 541 */
typedef UINT32 EFI_RESOURCE_ATTRIBUTE_TYPE;

/* 542 */
typedef UINT32 EFI_RESOURCE_TYPE;

/* 543 */
struct EFI_ACPI_COMMON_HEADER
{
  UINT32 Signature;
  UINT32 Length;
};

/* 544 */
struct __attribute__((packed)) __attribute__((aligned(4))) EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE
{
  UINT8 AddressSpaceId;
  UINT8 RegisterBitWidth;
  UINT8 RegisterBitOffset;
  UINT8 Reserved;
  UINT64 Address;
};

/* 545 */
struct __attribute__((packed)) __attribute__((aligned(4))) EFI_ACPI_DESCRIPTION_HEADER
{
  UINT32 Signature;
  UINT32 Length;
  UINT8 Revision;
  UINT8 Checksum;
  UINT8 OemId[6];
  UINT64 OemTableId;
  UINT32 OemRevision;
  UINT32 CreatorId;
  UINT32 CreatorRevision;
};

/* 546 */
struct __attribute__((packed)) __attribute__((aligned(4))) EFI_ACPI_2_0_FIXED_ACPI_DESCRIPTION_TABLE
{
  EFI_ACPI_DESCRIPTION_HEADER Header;
  UINT32 FirmwareCtrl;
  UINT32 Dsdt;
  UINT8 Reserved0;
  UINT8 PreferredPmProfile;
  UINT16 SciInt;
  UINT32 SmiCmd;
  UINT8 AcpiEnable;
  UINT8 AcpiDisable;
  UINT8 S4BiosReq;
  UINT8 PstateCnt;
  UINT32 Pm1aEvtBlk;
  UINT32 Pm1bEvtBlk;
  UINT32 Pm1aCntBlk;
  UINT32 Pm1bCntBlk;
  UINT32 Pm2CntBlk;
  UINT32 PmTmrBlk;
  UINT32 Gpe0Blk;
  UINT32 Gpe1Blk;
  UINT8 Pm1EvtLen;
  UINT8 Pm1CntLen;
  UINT8 Pm2CntLen;
  UINT8 PmTmrLen;
  UINT8 Gpe0BlkLen;
  UINT8 Gpe1BlkLen;
  UINT8 Gpe1Base;
  UINT8 CstCnt;
  UINT16 PLvl2Lat;
  UINT16 PLvl3Lat;
  UINT16 FlushSize;
  UINT16 FlushStride;
  UINT8 DutyOffset;
  UINT8 DutyWidth;
  UINT8 DayAlrm;
  UINT8 MonAlrm;
  UINT8 Century;
  UINT16 IaPcBootArch;
  UINT8 Reserved1;
  UINT32 Flags;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE ResetReg;
  UINT8 ResetValue;
  UINT8 Reserved2[3];
  UINT64 XFirmwareCtrl;
  UINT64 XDsdt;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XPm1aEvtBlk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XPm1bEvtBlk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XPm1aCntBlk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XPm1bCntBlk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XPm2CntBlk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XPmTmrBlk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XGpe0Blk;
  EFI_ACPI_2_0_GENERIC_ADDRESS_STRUCTURE XGpe1Blk;
};

/* 547 */
struct EFI_UNICODE_STRING_TABLE
{
  CHAR8 *Language;
  CHAR16 *UnicodeString;
};

/* 548 */
typedef INTN (*BASE_SORT_COMPARE)(const void *, const void *);

/* 549 */
struct PCI_DEVICE_INDEPENDENT_REGION
{
  UINT16 VendorId;
  UINT16 DeviceId;
  UINT16 Command;
  UINT16 Status;
  UINT8 RevisionID;
  UINT8 ClassCode[3];
  UINT8 CacheLineSize;
  UINT8 LatencyTimer;
  UINT8 HeaderType;
  UINT8 BIST;
};

/* 550 */
struct PCI_DEVICE_HEADER_TYPE_REGION
{
  UINT32 Bar[6];
  UINT32 CISPtr;
  UINT16 SubsystemVendorID;
  UINT16 SubsystemID;
  UINT32 ExpansionRomBar;
  UINT8 CapabilityPtr;
  UINT8 Reserved1[3];
  UINT32 Reserved2;
  UINT8 InterruptLine;
  UINT8 InterruptPin;
  UINT8 MinGnt;
  UINT8 MaxLat;
};

/* 551 */
struct PCI_TYPE00
{
  PCI_DEVICE_INDEPENDENT_REGION Hdr;
  PCI_DEVICE_HEADER_TYPE_REGION Device;
};

/* 552 */
enum EFI_PCI_IO_PROTOCOL_ATTRIBUTE_OPERATION : __int32
{
  EfiPciIoAttributeOperationGet = 0x0,
  EfiPciIoAttributeOperationSet = 0x1,
  EfiPciIoAttributeOperationEnable = 0x2,
  EfiPciIoAttributeOperationDisable = 0x3,
  EfiPciIoAttributeOperationSupported = 0x4,
  EfiPciIoAttributeOperationMaximum = 0x5,
};

/* 553 */
enum EFI_PCI_IO_PROTOCOL_OPERATION : __int32
{
  EfiPciIoOperationBusMasterRead = 0x0,
  EfiPciIoOperationBusMasterWrite = 0x1,
  EfiPciIoOperationBusMasterCommonBuffer = 0x2,
  EfiPciIoOperationMaximum = 0x3,
};

/* 554 */
enum EFI_PCI_IO_PROTOCOL_WIDTH : __int32
{
  EfiPciIoWidthUint8 = 0x0,
  EfiPciIoWidthUint16 = 0x1,
  EfiPciIoWidthUint32 = 0x2,
  EfiPciIoWidthUint64 = 0x3,
  EfiPciIoWidthFifoUint8 = 0x4,
  EfiPciIoWidthFifoUint16 = 0x5,
  EfiPciIoWidthFifoUint32 = 0x6,
  EfiPciIoWidthFifoUint64 = 0x7,
  EfiPciIoWidthFillUint8 = 0x8,
  EfiPciIoWidthFillUint16 = 0x9,
  EfiPciIoWidthFillUint32 = 0xA,
  EfiPciIoWidthFillUint64 = 0xB,
  EfiPciIoWidthMaximum = 0xC,
};

/* 556 */
typedef _EFI_PCI_IO_PROTOCOL EFI_PCI_IO_PROTOCOL;

/* 555 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_SET_BAR_ATTRIBUTES)(EFI_PCI_IO_PROTOCOL *, UINT64, UINT8, UINT64 *, UINT64 *);

/* 558 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_POLL_IO_MEM)(EFI_PCI_IO_PROTOCOL *, EFI_PCI_IO_PROTOCOL_WIDTH, UINT8, UINT64, UINT64, UINT64, UINT64, UINT64 *);

/* 560 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_IO_MEM)(EFI_PCI_IO_PROTOCOL *, EFI_PCI_IO_PROTOCOL_WIDTH, UINT8, UINT64, UINTN, void *);

/* 559 */
struct EFI_PCI_IO_PROTOCOL_ACCESS
{
  EFI_PCI_IO_PROTOCOL_IO_MEM Read;
  EFI_PCI_IO_PROTOCOL_IO_MEM Write;
};

/* 562 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_CONFIG)(EFI_PCI_IO_PROTOCOL *, EFI_PCI_IO_PROTOCOL_WIDTH, UINT32, UINTN, void *);

/* 561 */
struct EFI_PCI_IO_PROTOCOL_CONFIG_ACCESS
{
  EFI_PCI_IO_PROTOCOL_CONFIG Read;
  EFI_PCI_IO_PROTOCOL_CONFIG Write;
};

/* 563 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_COPY_MEM)(EFI_PCI_IO_PROTOCOL *, EFI_PCI_IO_PROTOCOL_WIDTH, UINT8, UINT64, UINT8, UINT64, UINTN);

/* 564 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_MAP)(EFI_PCI_IO_PROTOCOL *, EFI_PCI_IO_PROTOCOL_OPERATION, void *, UINTN *, EFI_PHYSICAL_ADDRESS *, void **);

/* 565 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_UNMAP)(EFI_PCI_IO_PROTOCOL *, void *);

/* 566 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_ALLOCATE_BUFFER)(EFI_PCI_IO_PROTOCOL *, EFI_ALLOCATE_TYPE, EFI_MEMORY_TYPE, UINTN, void **, UINT64);

/* 567 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_FREE_BUFFER)(EFI_PCI_IO_PROTOCOL *, UINTN, void *);

/* 568 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_FLUSH)(EFI_PCI_IO_PROTOCOL *);

/* 569 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_GET_LOCATION)(EFI_PCI_IO_PROTOCOL *, UINTN *, UINTN *, UINTN *, UINTN *);

/* 570 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_ATTRIBUTES)(EFI_PCI_IO_PROTOCOL *, EFI_PCI_IO_PROTOCOL_ATTRIBUTE_OPERATION, UINT64, UINT64 *);

/* 571 */
typedef EFI_STATUS (*EFI_PCI_IO_PROTOCOL_GET_BAR_ATTRIBUTES)(EFI_PCI_IO_PROTOCOL *, UINT8, UINT64 *, void **);

/* 557 */
struct _EFI_PCI_IO_PROTOCOL
{
  EFI_PCI_IO_PROTOCOL_POLL_IO_MEM PollMem;
  EFI_PCI_IO_PROTOCOL_POLL_IO_MEM PollIo;
  EFI_PCI_IO_PROTOCOL_ACCESS Mem;
  EFI_PCI_IO_PROTOCOL_ACCESS Io;
  EFI_PCI_IO_PROTOCOL_CONFIG_ACCESS Pci;
  EFI_PCI_IO_PROTOCOL_COPY_MEM CopyMem;
  EFI_PCI_IO_PROTOCOL_MAP Map;
  EFI_PCI_IO_PROTOCOL_UNMAP Unmap;
  EFI_PCI_IO_PROTOCOL_ALLOCATE_BUFFER AllocateBuffer;
  EFI_PCI_IO_PROTOCOL_FREE_BUFFER FreeBuffer;
  EFI_PCI_IO_PROTOCOL_FLUSH Flush;
  EFI_PCI_IO_PROTOCOL_GET_LOCATION GetLocation;
  EFI_PCI_IO_PROTOCOL_ATTRIBUTES Attributes;
  EFI_PCI_IO_PROTOCOL_GET_BAR_ATTRIBUTES GetBarAttributes;
  EFI_PCI_IO_PROTOCOL_SET_BAR_ATTRIBUTES SetBarAttributes;
  UINT64 RomSize;
  void *RomImage;
};

/* 574 */
typedef _EFI_DEFERRED_IMAGE_LOAD_PROTOCOL EFI_DEFERRED_IMAGE_LOAD_PROTOCOL;

/* 573 */
typedef EFI_STATUS (*EFI_DEFERRED_IMAGE_INFO)(EFI_DEFERRED_IMAGE_LOAD_PROTOCOL *, UINTN, EFI_DEVICE_PATH_PROTOCOL **, void **, UINTN *, BOOLEAN *);

/* 572 */
struct _EFI_DEFERRED_IMAGE_LOAD_PROTOCOL
{
  EFI_DEFERRED_IMAGE_INFO GetImageInfo;
};

/* 575 */
struct __attribute__((aligned(8))) EDKII_SET_VARIABLE_STATUS
{
  EFI_GUID Guid;
  UINTN NameSize;
  UINTN DataSize;
  EFI_STATUS SetStatus;
  UINT32 Attributes;
};

/* 576 */
struct EFI_HOB_GENERIC_HEADER
{
  UINT16 HobType;
  UINT16 HobLength;
  UINT32 Reserved;
};

/* 577 */
struct EFI_HOB_GUID_TYPE
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_GUID Name;
};

/* 578 */
struct EFI_MEMORY_TYPE_INFORMATION
{
  UINT32 Type;
  UINT32 NumberOfPages;
};

/* 579 */
enum EFI_UGA_BLT_OPERATION : __int32
{
  EfiUgaVideoFill = 0x0,
  EfiUgaVideoToBltBuffer = 0x1,
  EfiUgaBltBufferToVideo = 0x2,
  EfiUgaVideoToVideo = 0x3,
  EfiUgaBltMax = 0x4,
};

/* 580 */
typedef EFI_GRAPHICS_OUTPUT_BLT_PIXEL EFI_UGA_PIXEL;

/* 582 */
typedef _EFI_UGA_DRAW_PROTOCOL EFI_UGA_DRAW_PROTOCOL;

/* 581 */
typedef EFI_STATUS (*EFI_UGA_DRAW_PROTOCOL_SET_MODE)(EFI_UGA_DRAW_PROTOCOL *, UINT32, UINT32, UINT32, UINT32);

/* 584 */
typedef EFI_STATUS (*EFI_UGA_DRAW_PROTOCOL_GET_MODE)(EFI_UGA_DRAW_PROTOCOL *, UINT32 *, UINT32 *, UINT32 *, UINT32 *);

/* 585 */
typedef EFI_STATUS (*EFI_UGA_DRAW_PROTOCOL_BLT)(EFI_UGA_DRAW_PROTOCOL *, EFI_UGA_PIXEL *, EFI_UGA_BLT_OPERATION, UINTN, UINTN, UINTN, UINTN, UINTN, UINTN, UINTN);

/* 583 */
struct _EFI_UGA_DRAW_PROTOCOL
{
  EFI_UGA_DRAW_PROTOCOL_GET_MODE GetMode;
  EFI_UGA_DRAW_PROTOCOL_SET_MODE SetMode;
  EFI_UGA_DRAW_PROTOCOL_BLT Blt;
};

/* 587 */
typedef _EDKII_BOOT_LOGO2_PROTOCOL EDKII_BOOT_LOGO2_PROTOCOL;

/* 586 */
typedef EFI_STATUS (*EDKII_SET_BOOT_LOGO2)(EDKII_BOOT_LOGO2_PROTOCOL *, EFI_GRAPHICS_OUTPUT_BLT_PIXEL *, UINTN, UINTN, UINTN, UINTN);

/* 589 */
typedef EFI_STATUS (*EDKII_GET_BOOT_LOGO2)(EDKII_BOOT_LOGO2_PROTOCOL *, EFI_GRAPHICS_OUTPUT_BLT_PIXEL **, UINTN *, UINTN *, UINTN *, UINTN *);

/* 588 */
struct _EDKII_BOOT_LOGO2_PROTOCOL
{
  EDKII_SET_BOOT_LOGO2 SetBootLogo;
  EDKII_GET_BOOT_LOGO2 GetBootLogo;
};

/* 590 */
enum EDKII_PLATFORM_LOGO_DISPLAY_ATTRIBUTE : __int32
{
  EdkiiPlatformLogoDisplayAttributeLeftTop = 0x0,
  EdkiiPlatformLogoDisplayAttributeCenterTop = 0x1,
  EdkiiPlatformLogoDisplayAttributeRightTop = 0x2,
  EdkiiPlatformLogoDisplayAttributeCenterRight = 0x3,
  EdkiiPlatformLogoDisplayAttributeRightBottom = 0x4,
  EdkiiPlatformLogoDisplayAttributeCenterBottom = 0x5,
  EdkiiPlatformLogoDisplayAttributeLeftBottom = 0x6,
  EdkiiPlatformLogoDisplayAttributeCenterLeft = 0x7,
  EdkiiPlatformLogoDisplayAttributeCenter = 0x8,
};

/* 593 */
typedef _EDKII_PLATFORM_LOGO_PROTOCOL EDKII_PLATFORM_LOGO_PROTOCOL;

/* 592 */
typedef EFI_STATUS (*EDKII_PLATFORM_LOGO_GET_IMAGE)(EDKII_PLATFORM_LOGO_PROTOCOL *, UINT32 *, EFI_IMAGE_INPUT *, EDKII_PLATFORM_LOGO_DISPLAY_ATTRIBUTE *, INTN *, INTN *);

/* 591 */
struct _EDKII_PLATFORM_LOGO_PROTOCOL
{
  EDKII_PLATFORM_LOGO_GET_IMAGE GetImage;
};

/* 594 */
struct _EFI_IFR_FORM
{
  EFI_IFR_OP_HEADER Header;
  UINT16 FormId;
  EFI_STRING_ID FormTitle;
};

/* 595 */
typedef _EFI_IFR_FORM EFI_IFR_FORM;

/* 596 */
union $A303A467F851DF67A025AF441719E7B1
{
  EFI_STRING_ID VarName;
  UINT16 VarOffset;
};

/* 597 */
struct _EFI_IFR_STATEMENT_HEADER
{
  EFI_STRING_ID Prompt;
  EFI_STRING_ID Help;
};

/* 598 */
typedef _EFI_IFR_STATEMENT_HEADER EFI_IFR_STATEMENT_HEADER;

/* 599 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_QUESTION_HEADER
{
  EFI_IFR_STATEMENT_HEADER Header;
  EFI_QUESTION_ID QuestionId;
  EFI_VARSTORE_ID VarStoreId;
  $A303A467F851DF67A025AF441719E7B1 VarStoreInfo;
  UINT8 Flags;
};

/* 600 */
typedef _EFI_IFR_QUESTION_HEADER EFI_IFR_QUESTION_HEADER;

/* 601 */
struct _EFI_IFR_TIME
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 Flags;
};

/* 602 */
typedef _EFI_IFR_TIME EFI_IFR_TIME;

/* 603 */
struct _EFI_IFR_DATE
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 Flags;
};

/* 604 */
typedef _EFI_IFR_DATE EFI_IFR_DATE;

/* 605 */
struct _EFI_IFR_TEXT
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_STATEMENT_HEADER Statement;
  EFI_STRING_ID TextTwo;
};

/* 606 */
typedef _EFI_IFR_TEXT EFI_IFR_TEXT;

/* 607 */
struct _EFI_IFR_ORDERED_LIST
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 MaxContainers;
  UINT8 Flags;
};

/* 608 */
typedef _EFI_IFR_ORDERED_LIST EFI_IFR_ORDERED_LIST;

/* 609 */
struct $A2F29DEABC6FAFB2C508D94AF4E0812D
{
  UINT32 MinValue;
  UINT32 MaxValue;
  UINT32 Step;
};

/* 610 */
struct $C60B962B0F667D8E85B69DECB456A2B9
{
  UINT16 MinValue;
  UINT16 MaxValue;
  UINT16 Step;
};

/* 611 */
struct $F68DC3A756A945DCDF5E8C97714EAB93
{
  UINT8 MinValue;
  UINT8 MaxValue;
  UINT8 Step;
};

/* 612 */
struct $6AFC79FAAAF03FD79CA79AFF9C78685F
{
  UINT64 MinValue;
  UINT64 MaxValue;
  UINT64 Step;
};

/* 613 */
union MINMAXSTEP_DATA
{
  $F68DC3A756A945DCDF5E8C97714EAB93 u8;
  $C60B962B0F667D8E85B69DECB456A2B9 u16;
  $A2F29DEABC6FAFB2C508D94AF4E0812D u32;
  $6AFC79FAAAF03FD79CA79AFF9C78685F u64;
};

/* 614 */
struct __attribute__((packed)) __attribute__((aligned(2))) _EFI_IFR_ONE_OF
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 Flags;
  MINMAXSTEP_DATA data;
};

/* 615 */
typedef _EFI_IFR_ONE_OF EFI_IFR_ONE_OF;

/* 616 */
struct _EFI_IFR_STRING
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 MinSize;
  UINT8 MaxSize;
  UINT8 Flags;
};

/* 617 */
typedef _EFI_IFR_STRING EFI_IFR_STRING;

/* 618 */
struct __attribute__((packed)) __attribute__((aligned(2))) _EFI_IFR_NUMERIC
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 Flags;
  MINMAXSTEP_DATA data;
};

/* 619 */
typedef _EFI_IFR_NUMERIC EFI_IFR_NUMERIC;

/* 620 */
struct _EFI_IFR_CHECKBOX
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  UINT8 Flags;
};

/* 621 */
typedef _EFI_IFR_CHECKBOX EFI_IFR_CHECKBOX;

/* 622 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_REF4
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  EFI_FORM_ID FormId;
  EFI_QUESTION_ID QuestionId;
  EFI_GUID FormSetId;
  EFI_STRING_ID DevicePath;
};

/* 623 */
typedef _EFI_IFR_REF4 EFI_IFR_REF4;

/* 624 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_REF
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  EFI_FORM_ID FormId;
};

/* 625 */
typedef _EFI_IFR_REF EFI_IFR_REF;

/* 626 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_SUBTITLE
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_STATEMENT_HEADER Statement;
  UINT8 Flags;
};

/* 627 */
typedef _EFI_IFR_SUBTITLE EFI_IFR_SUBTITLE;

/* 628 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_ACTION
{
  EFI_IFR_OP_HEADER Header;
  EFI_IFR_QUESTION_HEADER Question;
  EFI_STRING_ID QuestionConfig;
};

/* 629 */
typedef _EFI_IFR_ACTION EFI_IFR_ACTION;

/* 630 */
struct __attribute__((packed)) __attribute__((aligned(2))) _EFI_IFR_GUID
{
  EFI_IFR_OP_HEADER Header;
  EFI_GUID Guid;
};

/* 631 */
typedef _EFI_IFR_GUID EFI_IFR_GUID;

/* 632 */
struct EFI_HII_DATE
{
  UINT16 Year;
  UINT8 Month;
  UINT8 Day;
};

/* 633 */
struct EFI_HII_TIME
{
  UINT8 Hour;
  UINT8 Minute;
  UINT8 Second;
};

/* 634 */
struct __attribute__((packed)) __attribute__((aligned(2))) EFI_HII_REF
{
  EFI_QUESTION_ID QuestionId;
  EFI_FORM_ID FormId;
  EFI_GUID FormSetGuid;
  EFI_STRING_ID DevicePath;
};

/* 635 */
union __attribute__((packed)) __attribute__((aligned(2))) EFI_IFR_TYPE_VALUE
{
  UINT8 u8;
  UINT16 u16;
  UINT32 u32;
  UINT64 u64;
  BOOLEAN b;
  EFI_HII_TIME time;
  EFI_HII_DATE date;
  EFI_STRING_ID string;
  EFI_HII_REF ref;
};

/* 636 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_DEFAULT
{
  EFI_IFR_OP_HEADER Header;
  UINT16 DefaultId;
  UINT8 Type;
  EFI_IFR_TYPE_VALUE Value;
};

/* 637 */
typedef _EFI_IFR_DEFAULT EFI_IFR_DEFAULT;

/* 638 */
struct _EFI_IFR_ONE_OF_OPTION
{
  EFI_IFR_OP_HEADER Header;
  EFI_STRING_ID Option;
  UINT8 Flags;
  UINT8 Type;
  EFI_IFR_TYPE_VALUE Value;
};

/* 639 */
typedef _EFI_IFR_ONE_OF_OPTION EFI_IFR_ONE_OF_OPTION;

/* 640 */
struct _EFI_IFR_END
{
  EFI_IFR_OP_HEADER Header;
};

/* 641 */
typedef _EFI_IFR_END EFI_IFR_END;

/* 642 */
struct IFR_VARSTORAGE_DATA
{
  EFI_VARSTORE_ID VarStoreId;
  UINT16 Size;
};

/* 643 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_VARSTORE_EFI
{
  EFI_IFR_OP_HEADER Header;
  EFI_VARSTORE_ID VarStoreId;
  EFI_GUID Guid;
  UINT32 Attributes;
  UINT16 Size;
  UINT8 Name[1];
};

/* 644 */
typedef _EFI_IFR_VARSTORE_EFI EFI_IFR_VARSTORE_EFI;

/* 645 */
struct _EFI_IFR_VARSTORE_NAME_VALUE
{
  EFI_IFR_OP_HEADER Header;
  EFI_VARSTORE_ID VarStoreId;
  EFI_GUID Guid;
};

/* 646 */
typedef _EFI_IFR_VARSTORE_NAME_VALUE EFI_IFR_VARSTORE_NAME_VALUE;

/* 647 */
struct __attribute__((packed)) __attribute__((aligned(1))) _EFI_IFR_VARSTORE
{
  EFI_IFR_OP_HEADER Header;
  EFI_GUID Guid;
  EFI_VARSTORE_ID VarStoreId;
  UINT16 Size;
  UINT8 Name[1];
};

/* 648 */
typedef _EFI_IFR_VARSTORE EFI_IFR_VARSTORE;

/* 649 */
union EFI_IMAGE_OPTIONAL_HEADER_PTR_UNION
{
  EFI_IMAGE_NT_HEADERS32 *Pe32;
  EFI_IMAGE_NT_HEADERS64 *Pe32Plus;
  EFI_TE_IMAGE_HEADER *Te;
  EFI_IMAGE_OPTIONAL_HEADER_UNION *Union;
};

/* 650 */
struct EFI_IMAGE_DEBUG_DIRECTORY_ENTRY
{
  UINT32 Characteristics;
  UINT32 TimeDateStamp;
  UINT16 MajorVersion;
  UINT16 MinorVersion;
  UINT32 Type;
  UINT32 SizeOfData;
  UINT32 RVA;
  UINT32 FileOffset;
};

/* 651 */
struct EFI_HOB_HANDOFF_INFO_TABLE
{
  EFI_HOB_GENERIC_HEADER Header;
  UINT32 Version;
  EFI_BOOT_MODE BootMode;
  EFI_PHYSICAL_ADDRESS EfiMemoryTop;
  EFI_PHYSICAL_ADDRESS EfiMemoryBottom;
  EFI_PHYSICAL_ADDRESS EfiFreeMemoryTop;
  EFI_PHYSICAL_ADDRESS EfiFreeMemoryBottom;
  EFI_PHYSICAL_ADDRESS EfiEndOfHobList;
};

/* 654 */
typedef _EFI_LOAD_FILE2_PROTOCOL EFI_LOAD_FILE2_PROTOCOL;

/* 653 */
typedef EFI_STATUS (*EFI_LOAD_FILE2)(EFI_LOAD_FILE2_PROTOCOL *, EFI_DEVICE_PATH_PROTOCOL *, BOOLEAN, UINTN *, void *);

/* 652 */
struct _EFI_LOAD_FILE2_PROTOCOL
{
  EFI_LOAD_FILE2 LoadFile;
};

/* 655 */
struct __attribute__((aligned(8))) EFI_FILE_INFO
{
  UINT64 Size;
  UINT64 FileSize;
  UINT64 PhysicalSize;
  EFI_TIME CreateTime;
  EFI_TIME LastAccessTime;
  EFI_TIME ModificationTime;
  UINT64 Attribute;
  CHAR16 FileName[1];
};

/* 656 */
typedef _EFI_FILE_PROTOCOL *EFI_FILE_HANDLE;

/* 657 */
typedef UINT32 EFI_FV_FILE_ATTRIBUTES;

/* 658 */
struct __attribute__((aligned(8))) EFI_FV_WRITE_FILE_DATA
{
  EFI_GUID *NameGuid;
  EFI_FV_FILETYPE Type;
  EFI_FV_FILE_ATTRIBUTES FileAttributes;
  void *Buffer;
  UINT32 BufferSize;
};

/* 659 */
typedef UINT32 EFI_FV_WRITE_POLICY;

/* 660 */
typedef UINT64 EFI_FV_ATTRIBUTES;

/* 662 */
typedef _EFI_FIRMWARE_VOLUME2_PROTOCOL EFI_FIRMWARE_VOLUME2_PROTOCOL;

/* 661 */
typedef EFI_STATUS (*EFI_FV_GET_NEXT_FILE)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, void *, EFI_FV_FILETYPE *, EFI_GUID *, EFI_FV_FILE_ATTRIBUTES *, UINTN *);

/* 664 */
typedef EFI_STATUS (*EFI_FV_GET_ATTRIBUTES)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, EFI_FV_ATTRIBUTES *);

/* 665 */
typedef EFI_STATUS (*EFI_FV_SET_ATTRIBUTES)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, EFI_FV_ATTRIBUTES *);

/* 666 */
typedef EFI_STATUS (*EFI_FV_READ_FILE)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, const GUID *, void **, UINTN *, EFI_FV_FILETYPE *, EFI_FV_FILE_ATTRIBUTES *, UINT32 *);

/* 667 */
typedef EFI_STATUS (*EFI_FV_READ_SECTION)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, const GUID *, EFI_SECTION_TYPE, UINTN, void **, UINTN *, UINT32 *);

/* 668 */
typedef EFI_STATUS (*EFI_FV_WRITE_FILE)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, UINT32, EFI_FV_WRITE_POLICY, EFI_FV_WRITE_FILE_DATA *);

/* 669 */
typedef EFI_STATUS (*EFI_FV_GET_INFO)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, const GUID *, UINTN *, void *);

/* 670 */
typedef EFI_STATUS (*EFI_FV_SET_INFO)(const EFI_FIRMWARE_VOLUME2_PROTOCOL *, const GUID *, UINTN, const void *);

/* 663 */
struct _EFI_FIRMWARE_VOLUME2_PROTOCOL
{
  EFI_FV_GET_ATTRIBUTES GetVolumeAttributes;
  EFI_FV_SET_ATTRIBUTES SetVolumeAttributes;
  EFI_FV_READ_FILE ReadFile;
  EFI_FV_READ_SECTION ReadSection;
  EFI_FV_WRITE_FILE WriteFile;
  EFI_FV_GET_NEXT_FILE GetNextFile;
  UINT32 KeySize;
  EFI_HANDLE ParentHandle;
  EFI_FV_GET_INFO GetInfo;
  EFI_FV_SET_INFO SetInfo;
};

/* 671 */
struct EFI_HOB_UEFI_CAPSULE
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_PHYSICAL_ADDRESS BaseAddress;
  UINT64 Length;
};

/* 672 */
struct EFI_HOB_MEMORY_POOL
{
  EFI_HOB_GENERIC_HEADER Header;
};

/* 673 */
struct EFI_HOB_CPU
{
  EFI_HOB_GENERIC_HEADER Header;
  UINT8 SizeOfMemorySpace;
  UINT8 SizeOfIoSpace;
  UINT8 Reserved[6];
};

/* 674 */
struct EFI_HOB_FIRMWARE_VOLUME3
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_PHYSICAL_ADDRESS BaseAddress;
  UINT64 Length;
  UINT32 AuthenticationStatus;
  BOOLEAN ExtractedFv;
  EFI_GUID FvName;
  EFI_GUID FileName;
};

/* 675 */
struct EFI_HOB_FIRMWARE_VOLUME2
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_PHYSICAL_ADDRESS BaseAddress;
  UINT64 Length;
  EFI_GUID FvName;
  EFI_GUID FileName;
};

/* 676 */
typedef EFI_HOB_UEFI_CAPSULE EFI_HOB_FIRMWARE_VOLUME;

/* 677 */
struct EFI_HOB_RESOURCE_DESCRIPTOR
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_GUID Owner;
  EFI_RESOURCE_TYPE ResourceType;
  EFI_RESOURCE_ATTRIBUTE_TYPE ResourceAttribute;
  EFI_PHYSICAL_ADDRESS PhysicalStart;
  UINT64 ResourceLength;
};

/* 678 */
struct EFI_HOB_MEMORY_ALLOCATION_HEADER
{
  EFI_GUID Name;
  EFI_PHYSICAL_ADDRESS MemoryBaseAddress;
  UINT64 MemoryLength;
  EFI_MEMORY_TYPE MemoryType;
  UINT8 Reserved[4];
};

/* 679 */
struct EFI_HOB_MEMORY_ALLOCATION_MODULE
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_HOB_MEMORY_ALLOCATION_HEADER MemoryAllocationHeader;
  EFI_GUID ModuleName;
  EFI_PHYSICAL_ADDRESS EntryPoint;
};

/* 680 */
struct EFI_HOB_MEMORY_ALLOCATION_STACK
{
  EFI_HOB_GENERIC_HEADER Header;
  EFI_HOB_MEMORY_ALLOCATION_HEADER AllocDescriptor;
};

/* 681 */
typedef EFI_HOB_MEMORY_ALLOCATION_STACK EFI_HOB_MEMORY_ALLOCATION_BSP_STORE;

/* 682 */
typedef EFI_HOB_MEMORY_ALLOCATION_STACK EFI_HOB_MEMORY_ALLOCATION;

/* 683 */
union EFI_PEI_HOB_POINTERS
{
  EFI_HOB_GENERIC_HEADER *Header;
  EFI_HOB_HANDOFF_INFO_TABLE *HandoffInformationTable;
  EFI_HOB_MEMORY_ALLOCATION *MemoryAllocation;
  EFI_HOB_MEMORY_ALLOCATION_BSP_STORE *MemoryAllocationBspStore;
  EFI_HOB_MEMORY_ALLOCATION_STACK *MemoryAllocationStack;
  EFI_HOB_MEMORY_ALLOCATION_MODULE *MemoryAllocationModule;
  EFI_HOB_RESOURCE_DESCRIPTOR *ResourceDescriptor;
  EFI_HOB_GUID_TYPE *Guid;
  EFI_HOB_FIRMWARE_VOLUME *FirmwareVolume;
  EFI_HOB_FIRMWARE_VOLUME2 *FirmwareVolume2;
  EFI_HOB_FIRMWARE_VOLUME3 *FirmwareVolume3;
  EFI_HOB_CPU *Cpu;
  EFI_HOB_MEMORY_POOL *Pool;
  EFI_HOB_UEFI_CAPSULE *Capsule;
  UINT8 *Raw;
};

/* 684 */
struct __attribute__((packed)) __attribute__((aligned(4))) EFI_ACPI_2_0_ROOT_SYSTEM_DESCRIPTION_POINTER
{
  UINT64 Signature;
  UINT8 Checksum;
  UINT8 OemId[6];
  UINT8 Revision;
  UINT32 RsdtAddress;
  UINT32 Length;
  UINT64 XsdtAddress;
  UINT8 ExtendedChecksum;
  UINT8 Reserved[3];
};

/* 685 */
enum EFI_DRIVER_DIAGNOSTIC_TYPE : __int32
{
  EfiDriverDiagnosticTypeStandard = 0x0,
  EfiDriverDiagnosticTypeExtended = 0x1,
  EfiDriverDiagnosticTypeManufacturing = 0x2,
  EfiDriverDiagnosticTypeCancel = 0x3,
  EfiDriverDiagnosticTypeMaximum = 0x4,
};

/* 688 */
typedef _EFI_DRIVER_DIAGNOSTICS2_PROTOCOL EFI_DRIVER_DIAGNOSTICS2_PROTOCOL;

/* 687 */
typedef EFI_STATUS (*EFI_DRIVER_DIAGNOSTICS2_RUN_DIAGNOSTICS)(EFI_DRIVER_DIAGNOSTICS2_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, EFI_DRIVER_DIAGNOSTIC_TYPE, CHAR8 *, EFI_GUID **, UINTN *, CHAR16 **);

/* 686 */
struct _EFI_DRIVER_DIAGNOSTICS2_PROTOCOL
{
  EFI_DRIVER_DIAGNOSTICS2_RUN_DIAGNOSTICS RunDiagnostics;
  CHAR8 *SupportedLanguages;
};

/* 691 */
typedef _EFI_DRIVER_DIAGNOSTICS_PROTOCOL EFI_DRIVER_DIAGNOSTICS_PROTOCOL;

/* 690 */
typedef EFI_STATUS (*EFI_DRIVER_DIAGNOSTICS_RUN_DIAGNOSTICS)(EFI_DRIVER_DIAGNOSTICS_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, EFI_DRIVER_DIAGNOSTIC_TYPE, CHAR8 *, EFI_GUID **, UINTN *, CHAR16 **);

/* 689 */
struct _EFI_DRIVER_DIAGNOSTICS_PROTOCOL
{
  EFI_DRIVER_DIAGNOSTICS_RUN_DIAGNOSTICS RunDiagnostics;
  CHAR8 *SupportedLanguages;
};

/* 692 */
enum EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED : __int32
{
  EfiDriverConfigurationActionNone = 0x0,
  EfiDriverConfigurationActionStopController = 0x1,
  EfiDriverConfigurationActionRestartController = 0x2,
  EfiDriverConfigurationActionRestartPlatform = 0x3,
  EfiDriverConfigurationActionMaximum = 0x4,
};

/* 694 */
typedef _EFI_DRIVER_CONFIGURATION2_PROTOCOL EFI_DRIVER_CONFIGURATION2_PROTOCOL;

/* 693 */
typedef EFI_STATUS (*EFI_DRIVER_CONFIGURATION2_OPTIONS_VALID)(EFI_DRIVER_CONFIGURATION2_PROTOCOL *, EFI_HANDLE, EFI_HANDLE);

/* 696 */
typedef EFI_STATUS (*EFI_DRIVER_CONFIGURATION2_SET_OPTIONS)(EFI_DRIVER_CONFIGURATION2_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, CHAR8 *, EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED *);

/* 697 */
typedef EFI_STATUS (*EFI_DRIVER_CONFIGURATION2_FORCE_DEFAULTS)(EFI_DRIVER_CONFIGURATION2_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, UINT32, EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED *);

/* 695 */
struct _EFI_DRIVER_CONFIGURATION2_PROTOCOL
{
  EFI_DRIVER_CONFIGURATION2_SET_OPTIONS SetOptions;
  EFI_DRIVER_CONFIGURATION2_OPTIONS_VALID OptionsValid;
  EFI_DRIVER_CONFIGURATION2_FORCE_DEFAULTS ForceDefaults;
  CHAR8 *SupportedLanguages;
};

/* 699 */
typedef _EFI_DRIVER_CONFIGURATION_PROTOCOL EFI_DRIVER_CONFIGURATION_PROTOCOL;

/* 698 */
typedef EFI_STATUS (*EFI_DRIVER_CONFIGURATION_OPTIONS_VALID)(EFI_DRIVER_CONFIGURATION_PROTOCOL *, EFI_HANDLE, EFI_HANDLE);

/* 701 */
typedef EFI_STATUS (*EFI_DRIVER_CONFIGURATION_SET_OPTIONS)(EFI_DRIVER_CONFIGURATION_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, CHAR8 *, EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED *);

/* 702 */
typedef EFI_STATUS (*EFI_DRIVER_CONFIGURATION_FORCE_DEFAULTS)(EFI_DRIVER_CONFIGURATION_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, UINT32, EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED *);

/* 700 */
struct _EFI_DRIVER_CONFIGURATION_PROTOCOL
{
  EFI_DRIVER_CONFIGURATION_SET_OPTIONS SetOptions;
  EFI_DRIVER_CONFIGURATION_OPTIONS_VALID OptionsValid;
  EFI_DRIVER_CONFIGURATION_FORCE_DEFAULTS ForceDefaults;
  CHAR8 *SupportedLanguages;
};

/* 704 */
typedef _EFI_COMPONENT_NAME2_PROTOCOL EFI_COMPONENT_NAME2_PROTOCOL;

/* 703 */
typedef EFI_STATUS (*EFI_COMPONENT_NAME2_GET_DRIVER_NAME)(EFI_COMPONENT_NAME2_PROTOCOL *, CHAR8 *, CHAR16 **);

/* 706 */
typedef EFI_STATUS (*EFI_COMPONENT_NAME2_GET_CONTROLLER_NAME)(EFI_COMPONENT_NAME2_PROTOCOL *, EFI_HANDLE, EFI_HANDLE, CHAR8 *, CHAR16 **);

/* 705 */
struct _EFI_COMPONENT_NAME2_PROTOCOL
{
  EFI_COMPONENT_NAME2_GET_DRIVER_NAME GetDriverName;
  EFI_COMPONENT_NAME2_GET_CONTROLLER_NAME GetControllerName;
  CHAR8 *SupportedLanguages;
};

/* 708 */
typedef _EFI_DRIVER_BINDING_PROTOCOL EFI_DRIVER_BINDING_PROTOCOL;

/* 707 */
typedef EFI_STATUS (*EFI_DRIVER_BINDING_STOP)(EFI_DRIVER_BINDING_PROTOCOL *, EFI_HANDLE, UINTN, EFI_HANDLE *);

/* 710 */
typedef EFI_STATUS (*EFI_DRIVER_BINDING_SUPPORTED)(EFI_DRIVER_BINDING_PROTOCOL *, EFI_HANDLE, EFI_DEVICE_PATH_PROTOCOL *);

/* 711 */
typedef EFI_STATUS (*EFI_DRIVER_BINDING_START)(EFI_DRIVER_BINDING_PROTOCOL *, EFI_HANDLE, EFI_DEVICE_PATH_PROTOCOL *);

/* 709 */
struct _EFI_DRIVER_BINDING_PROTOCOL
{
  EFI_DRIVER_BINDING_SUPPORTED Supported;
  EFI_DRIVER_BINDING_START Start;
  EFI_DRIVER_BINDING_STOP Stop;
  UINT32 Version;
  EFI_HANDLE ImageHandle;
  EFI_HANDLE DriverBindingHandle;
};

/* 712 */
struct USB_CLASS_TEXT
{
  BOOLEAN ClassExist;
  UINT8 Class;
  BOOLEAN SubClassExist;
  UINT8 SubClass;
};

/* 713 */
struct __attribute__((packed)) __attribute__((aligned(2))) IA32_DESCRIPTOR
{
  UINT16 Limit;
  UINTN Base;
};

/* 714 */
struct IA32_FX_BUFFER
{
  UINT8 Buffer[512];
};

/* 715 */
typedef void X86_ASSEMBLY_PATCH_LABEL(void);

/* 716 */
typedef void (*SWITCH_STACK_ENTRY_POINT)(void *, void *);

/* 717 */
struct IA32_WORD_REGS
{
  UINT16 DI;
  UINT16 Reserved1;
  UINT16 SI;
  UINT16 Reserved2;
  UINT16 BP;
  UINT16 Reserved3;
  UINT16 SP;
  UINT16 Reserved4;
  UINT16 BX;
  UINT16 Reserved5;
  UINT16 DX;
  UINT16 Reserved6;
  UINT16 CX;
  UINT16 Reserved7;
  UINT16 AX;
  UINT16 Reserved8;
};

/* 718 */
struct $FAA6278549B6557CF98CEE42514FDABC
{
  unsigned __int32 CF : 1;
  unsigned __int32 Reserved_0 : 1;
  unsigned __int32 PF : 1;
  unsigned __int32 Reserved_1 : 1;
  unsigned __int32 AF : 1;
  unsigned __int32 Reserved_2 : 1;
  unsigned __int32 ZF : 1;
  unsigned __int32 SF : 1;
  unsigned __int32 TF : 1;
  unsigned __int32 IF : 1;
  unsigned __int32 DF : 1;
  unsigned __int32 OF : 1;
  unsigned __int32 IOPL : 2;
  unsigned __int32 NT : 1;
  unsigned __int32 Reserved_3 : 1;
  unsigned __int32 RF : 1;
  unsigned __int32 VM : 1;
  unsigned __int32 AC : 1;
  unsigned __int32 VIF : 1;
  unsigned __int32 VIP : 1;
  unsigned __int32 ID : 1;
  unsigned __int32 Reserved_4 : 10;
};

/* 719 */
union IA32_EFLAGS32
{
  $FAA6278549B6557CF98CEE42514FDABC Bits;
  UINTN UintN;
};

/* 720 */
struct IA32_DWORD_REGS
{
  UINT32 EDI;
  UINT32 ESI;
  UINT32 EBP;
  UINT32 ESP;
  UINT32 EBX;
  UINT32 EDX;
  UINT32 ECX;
  UINT32 EAX;
  UINT16 DS;
  UINT16 ES;
  UINT16 FS;
  UINT16 GS;
  IA32_EFLAGS32 EFLAGS;
  UINT32 Eip;
  UINT16 CS;
  UINT16 SS;
};

/* 721 */
struct IA32_BYTE_REGS
{
  UINT32 Reserved1;
  UINT32 Reserved2;
  UINT32 Reserved3;
  UINT32 Reserved4;
  UINT8 BL;
  UINT8 BH;
  UINT16 Reserved5;
  UINT8 DL;
  UINT8 DH;
  UINT16 Reserved6;
  UINT8 CL;
  UINT8 CH;
  UINT16 Reserved7;
  UINT8 AL;
  UINT8 AH;
  UINT16 Reserved8;
};

/* 722 */
union IA32_REGISTER_SET
{
  IA32_DWORD_REGS E;
  IA32_WORD_REGS X;
  IA32_BYTE_REGS H;
};

/* 723 */
struct THUNK_CONTEXT
{
  IA32_REGISTER_SET *RealModeState;
  void *RealModeBuffer;
  UINT32 RealModeBufferSize;
  UINT32 ThunkAttributes;
};

/* 724 */
struct BLUETOOTH_LE_ADDRESS
{
  UINT8 Address[6];
  UINT8 Type;
};

/* 725 */
struct BLUETOOTH_LE_DEVICE_PATH
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  BLUETOOTH_LE_ADDRESS Address;
};

/* 726 */
struct __attribute__((packed)) __attribute__((aligned(1))) ISCSI_DEVICE_PATH_WITH_NAME
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  UINT16 NetworkProtocol;
  UINT16 LoginOption;
  UINT64 Lun;
  UINT16 TargetPortalGroupTag;
  CHAR8 TargetName[1];
};

/* 727 */
struct __attribute__((packed)) __attribute__((aligned(1))) VENDOR_DEVICE_PATH_WITH_DATA
{
  EFI_DEVICE_PATH_PROTOCOL Header;
  EFI_GUID Guid;
  UINT8 VendorDefinedData[1];
};

/* 728 */
struct $7833F8C65C4714F0FBC501CA072E8B58
{
  unsigned __int32 LimitLow : 16;
  unsigned __int32 BaseLow : 16;
  unsigned __int32 BaseMid : 8;
  unsigned __int32 Type : 4;
  unsigned __int32 S : 1;
  unsigned __int32 DPL : 2;
  unsigned __int32 P : 1;
  unsigned __int32 LimitHigh : 4;
  unsigned __int32 AVL : 1;
  unsigned __int32 L : 1;
  unsigned __int32 DB : 1;
  unsigned __int32 G : 1;
  unsigned __int32 BaseHigh : 8;
};

/* 729 */
union IA32_SEGMENT_DESCRIPTOR
{
  $7833F8C65C4714F0FBC501CA072E8B58 Bits;
  UINT64 Uint64;
};

/* 730 */
struct BASE_LIBRARY_JUMP_BUFFER
{
  UINT64 Rbx;
  UINT64 Rsp;
  UINT64 Rbp;
  UINT64 Rdi;
  UINT64 Rsi;
  UINT64 R12;
  UINT64 R13;
  UINT64 R14;
  UINT64 R15;
  UINT64 Rip;
  UINT64 MxCsr;
  UINT8 XmmBuffer[160];
  UINT64 Ssp;
};

/* 731 */
typedef UINTN *BASE_LIST;

/* 732 */
enum PCD_TYPE : __int32
{
  PCD_TYPE_8 = 0x0,
  PCD_TYPE_16 = 0x1,
  PCD_TYPE_32 = 0x2,
  PCD_TYPE_64 = 0x3,
  PCD_TYPE_BOOL = 0x4,
  PCD_TYPE_PTR = 0x5,
};

/* 733 */
struct PCD_INFO
{
  PCD_TYPE PcdType;
  UINTN PcdSize;
  CHAR8 *PcdName;
};

/* 734 */
typedef void (*PCD_CALLBACK)(const GUID *, UINTN, void *, UINTN);

/* 735 */
enum FILTER_IO_WIDTH : __int32
{
  FilterWidth8 = 0x0,
  FilterWidth16 = 0x1,
  FilterWidth32 = 0x2,
  FilterWidth64 = 0x3,
};

/* 736 */
struct EFI_DEBUG_INFO
{
  UINT32 ErrorLevel;
};

/* 737 */
enum EFI_STRING_TYPE : __int32
{
  EfiStringAscii = 0x0,
  EfiStringUnicode = 0x1,
  EfiStringToken = 0x2,
};

/* 738 */
struct __attribute__((aligned(8))) EFI_STATUS_CODE_STRING_TOKEN
{
  EFI_HII_HANDLE Handle;
  EFI_STRING_ID Token;
};

/* 739 */
union EFI_STATUS_CODE_STRING
{
  CHAR8 *Ascii;
  CHAR16 *Unicode;
  EFI_STATUS_CODE_STRING_TOKEN Hii;
};

/* 740 */
struct EFI_STATUS_CODE_STRING_DATA
{
  EFI_STATUS_CODE_DATA DataHeader;
  EFI_STRING_TYPE StringType;
  EFI_STATUS_CODE_STRING String;
};

/* 741 */
struct EFI_DEBUG_ASSERT_DATA
{
  EFI_STATUS_CODE_DATA DataHeader;
  UINT32 LineNumber;
  UINT32 FileNameSize;
  EFI_STATUS_CODE_STRING_DATA *FileName;
};

/* 742 */
typedef char INT8;

/* 743 */
typedef EFI_TIME TIME;

